{"version":3,"file":"plex.js","sources":["plex/core/utils.js","plex/core/headers.js","plex/core/interface_registry.js","plex/cloud/interfaces/registry.js","plex/cloud/interfaces/api/home/root.js","plex/cloud/interfaces/api/home/users.js","plex/cloud/interfaces/api/invites.js","plex/cloud/interfaces/api/root.js","plex/cloud/interfaces/pms/main.js","plex/cloud/interfaces/pms/playlists.js","plex/cloud/interfaces/pms/social.js","plex/cloud/interfaces/devices.js","plex/cloud/interfaces/main.js","plex/cloud/interfaces/pins.js","plex/cloud/interfaces/root.js","plex/cloud/interfaces/users.js","plex/cloud/main.js","plex/server/interfaces/registry.js","plex/server/interfaces/root.js","plex/server/main.js","plex/main.js","plex.js"],"names":["define","utils","random","string","length","chars","isDefined","result","i","Math","round","url","query","encode","parameters","components","key","hasOwnProperty","push","encodeURIComponent","join","path","clone","obj","temp","constructor","value","UAParser","buildDefaultHeaders","parser","browser","getBrowser","os","getOS","X-Plex-Device","name","X-Plex-Device-Name","X-Plex-Platform","X-Plex-Platform-Version","version","substr","indexOf","X-Plex-Product","X-Plex-Version","Headers","this","current","prototype","get","headers","update","reset","setDevice","device","setPlatform","setProduct","InterfaceRegistry","interfaces","set","cls","__path__","Error","console","debug","expose","target","exposeRoot","method","apply","arguments","registry","Root","$c","$r","config","outputType","request","users","Users","id","pin","Invites","requested","requests","home","resources","includeHttps","Main","ip","Playlists","all","playlist","unwatched","deleteItem","Social","networks","Devices","scrobble","identifier","unscrobble","Pins","devices","pins","account","login","username","password","Authorization","btoa","httpinvoke","when","Cloud","baseUrl","client_identifier","token","deferred","defer","converters","xml text","serializer","XMLSerializer","serializeToString","text xml","DOMParser","parseFromString","then","response","statusCode","resolve","body","reject","statusText","promise","details","identity","Server","cloud","plex","log"],"mappings":"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AAD,EAAAC,YAAA,IACAZ,EAAAa,QAAAF,EAAAG,MAEAd,EAAAe,OAAAJ,EAAAG,KAAAH,EAAAC,WAAAD,EAAA7E,QAAA,KAAA6E,EAAAK,aAEA,SAAAA,GAEAhB,EAAAe,OAAA,KAAA,KAAA,KAAA,KAAAC,KAGAhB,EAAAiB,SAGAG,IAEAvI,OAAA,aCnEA,kBACA,oBACA,SAAA+G,EAAAwB,GACA,OACAxB,MAAAA,EACAwB,OAAAA,EAEAC,MAAA,GAAAzB,MCRA/G,ODWA,QCVA,aACA,SAAAyI,GAGA,MAFA3E,SAAA4E,IAAA,oBAEAD;ArnEA,ADoEA;ACnEA;AACA;AACA;AACA;ACJA,ADKA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA,ADuBA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjnEA,ADoEA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA,ADWA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["define('plex/core/utils',[], function() {\r\n    var utils = {\r\n        random: {\r\n            string: function(length, chars) {\r\n                // Set parameter defaults\r\n                length = utils.isDefined(length) ? length : 16;\r\n                chars = utils.isDefined(chars) ? chars : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n                // Generate string\r\n                var result = '';\r\n\r\n                for (var i = length; i > 0; --i) {\r\n                    result += chars[Math.round(Math.random() * (chars.length - 1))];\r\n                }\r\n\r\n                return result;\r\n            }\r\n        },\r\n\r\n        url: {\r\n            query: {\r\n                encode: function(parameters) {\r\n                    // Check if the `parameters` are valid\r\n                    if(!utils.isDefined(parameters)) {\r\n                        return '';\r\n                    }\r\n\r\n                    // Build query string\r\n                    var components = [];\r\n\r\n                    for(var key in parameters) {\r\n                        if(!parameters.hasOwnProperty(key)) {\r\n                            continue;\r\n                        }\r\n\r\n                        components.push(encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]));\r\n                    }\r\n\r\n                    return components.join('&');\r\n                }\r\n            },\r\n\r\n            encode: function(path, parameters) {\r\n                var query = utils.url.query.encode(parameters);\r\n\r\n                if(query.length === 0) {\r\n                    // No parameters provided\r\n                    return path;\r\n                }\r\n\r\n                return path + '?' + query;\r\n            }\r\n        },\r\n\r\n        clone: function(obj) {\r\n            if (obj === null || typeof obj !== 'object') {\r\n                return obj;\r\n            }\r\n\r\n            var temp = obj.constructor();\r\n\r\n            for (var key in obj) {\r\n                if(!obj.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                temp[key] = utils.clone(obj[key]);\r\n            }\r\n\r\n            return temp;\r\n        },\r\n\r\n        isDefined: function(value) {\r\n            return !!(typeof value !== 'undefined' && value !== null);\r\n        }\r\n    };\r\n\r\n    return utils;\r\n});\n","define('plex/core/headers',[\r\n    'plex/core/utils',\r\n    'ua-parser'\r\n], function(utils, UAParser) {\r\n    function buildDefaultHeaders() {\r\n        var parser = new UAParser(),\r\n            browser = parser.getBrowser(),\r\n            os = parser.getOS();\r\n\r\n        return {\r\n            'X-Plex-Device': os.name,\r\n            'X-Plex-Device-Name': null,\r\n\r\n            'X-Plex-Platform': browser.name,\r\n            'X-Plex-Platform-Version': browser.version.substr(0, browser.version.indexOf('.', 3)),\r\n\r\n            'X-Plex-Product': 'plex.js',\r\n            'X-Plex-Version': '1.0.0'\r\n        };\r\n    }\r\n\r\n    function Headers() {\r\n        this.default = buildDefaultHeaders();\r\n        this.current = utils.clone(this.default);\r\n    }\r\n\r\n    Headers.prototype.get = function(headers) {\r\n        headers = typeof headers !== 'undefined' ? headers : {};\r\n\r\n        // Merge headers\r\n        var result = utils.clone(this.current);\r\n\r\n        if(result['X-Plex-Device-Name'] === null) {\r\n            // Automatically generate device name\r\n            if(result['X-Plex-Product'] !== null && result['X-Plex-Platform'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'] + ' (' + result['X-Plex-Platform'] + ')';\r\n            } else if(result['X-Plex-Product'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'];\r\n            } else {\r\n                result['X-Plex-Device-Name'] = 'plex.js';\r\n            }\r\n        }\r\n\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            result[key] = headers[key];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Headers.prototype.update = function(headers) {\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            this.current[key] = headers[key];\r\n        }\r\n    };\r\n\r\n    Headers.prototype.reset = function() {\r\n        this.current = utils.clone(this.default);\r\n    };\r\n\r\n    Headers.prototype.setDevice = function(name, device) {\r\n        this.update({\r\n            'X-Plex-Device': device,\r\n            'X-Plex-Device-Name': name\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setPlatform = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Platform': name,\r\n            'X-Plex-Platform-Version': version\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setProduct = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Product': name,\r\n            'X-Plex-Version': version\r\n        });\r\n    };\r\n\r\n    return Headers;\r\n});\n","define('plex/core/interface_registry',[\n    'plex/core/utils'\n], function(utils) {\n    function InterfaceRegistry() {\n        this.interfaces = {};\n    }\n\n    InterfaceRegistry.prototype.set = function(cls) {\n        var path = cls.__path__;\n\n        if(typeof path === 'undefined' || path === null) {\n            throw new Error('Interface is missing a \"__path__\" attribute', cls);\n        }\n\n        if(utils.isDefined(this.interfaces[path])) {\n            throw new Error('Interface \"' + path + '\" already registered');\n        }\n\n        // Register interface\n        this.interfaces[path] = cls;\n\n        console.debug('Registered interface \"%s\"', path);\n    };\n\n    InterfaceRegistry.prototype.expose = function(target) {\n        for(var key in this.interfaces) {\n            if(!this.interfaces.hasOwnProperty(key)) {\n                continue;\n            }\n\n            target[key] = new this.interfaces[key](target);\n\n            console.debug('Exposed interface \"%s\"', key);\n        }\n    };\n\n    InterfaceRegistry.prototype.exposeRoot = function(target) {\n        var cls = target[''];\n\n        if(!utils.isDefined(cls)) {\n            return;\n        }\n\n        // Apply root method proxies to `target`\n        for(var key in cls) {\n            // Ignore class attributes, and attributes starting with '$'\n            if(key.indexOf('$') === 0 || cls.hasOwnProperty(key)) {\n                continue;\n            }\n\n            // Ensure `target` proxy doesn't already exist\n            if(utils.isDefined(target[key])) {\n                throw new Error('Method proxy \"' + key + '\" already exists');\n            }\n\n            // Create method proxy\n            target[key] = (function(method) {\n                return function() {\n                    return method.apply(cls, arguments);\n                };\n            })(cls[key]);\n\n            console.debug('Exposed root method \"%s\"', key);\n        }\n    };\n\n    return InterfaceRegistry;\n});\n","define('plex/cloud/interfaces/registry',[\r\n    'plex/core/interface_registry'\r\n], function(InterfaceRegistry) {\r\n    return new InterfaceRegistry();\r\n});\n","define('plex/cloud/interfaces/api/home/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api/home';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/api/home/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.switch = function(id, pin) {\r\n        if(!utils.isDefined(id)) {\r\n            throw new Error();\r\n        }\r\n\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(pin)) {\r\n            parameters['pin'] = pin;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('POST', utils.url.encode(id + '/switch', parameters));\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/api/home/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/interfaces/api/invites',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Invites($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Invites.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Invites.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Invites.prototype.requested = function() {\r\n        return this.$r('GET', 'requested');\r\n    };\r\n\r\n    Invites.prototype.requests = function() {\r\n        return this.$r('GET', 'requests');\r\n    };\r\n\r\n    // Register interface\r\n    Invites.__path__ = '/api/invites';\r\n\r\n    registry.set(Invites);\r\n});\n","define('plex/cloud/interfaces/api/root',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.home = function() {\r\n        return this.$r('GET', 'home');\r\n    };\r\n\r\n    Root.prototype.resources = function(includeHttps) {\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(includeHttps)) {\r\n            // Convert boolean to integer\r\n            if(typeof includeHttps === 'boolean') {\r\n                includeHttps = includeHttps ? 1 : 0;\r\n            }\r\n\r\n            parameters['includeHttps'] = includeHttps;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('GET', utils.url.encode('resources', parameters));\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/pms/main',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.ip = function() {\r\n        return this.$r('GET', 'ip');\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/pms/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/pms/playlists',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Playlists($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Playlists.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Playlists.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Playlists.prototype.all = function(playlist) {\r\n        return this.$r('GET', playlist + '/all');\r\n    };\r\n\r\n    Playlists.prototype.unwatched = function(playlist) {\r\n        return this.$r('GET', playlist + '/unwatched');\r\n    };\r\n\r\n    // Items\r\n    Playlists.prototype.deleteItem = function(playlist, id) {\r\n        return this.$r('DELETE', playlist + '/items/' + id);\r\n    };\r\n\r\n    // Register interface\r\n    Playlists.__path__ = '/pms/playlists';\r\n\r\n    registry.set(Playlists);\r\n});\n","define('plex/cloud/interfaces/pms/social',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Social($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Social.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Social.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Social.prototype.networks = function() {\r\n        return this.$r('GET', 'networks');\r\n    };\r\n\r\n    // Register interface\r\n    Social.__path__ = '/pms/social';\r\n\r\n    registry.set(Social);\r\n});\n","define('plex/cloud/interfaces/devices',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Devices($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Devices.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Devices.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Devices.prototype.delete = function(id) {\r\n        return this.$r('DELETE', id + '.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Devices.__path__ = '/devices';\r\n\r\n    registry.set(Devices);\r\n});\n","define('plex/cloud/interfaces/main',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.scrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('scrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    Main.prototype.unscrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('unscrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/pins',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Pins($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Pins.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Pins.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Pins.prototype.get = function(id) {\r\n        return this.$r('GET', id + '.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Pins.__path__ = '/pins';\r\n\r\n    registry.set(Pins);\r\n});\n","define('plex/cloud/interfaces/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.devices = function() {\r\n        return this.$r('GET', 'devices.xml');\r\n    };\r\n\r\n    Root.prototype.pins = function() {\r\n        return this.$r('POST', 'pins.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.account = function() {\r\n        return this.$r('GET', 'account');\r\n    };\r\n\r\n    Users.prototype.login = function(username, password) {\r\n        if(!utils.isDefined(username) || !utils.isDefined(password)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('POST', 'sign_in.xml', {\r\n            headers: {\r\n                'Authorization': 'Basic ' + btoa(username + ':' + password)\r\n            }\r\n        });\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/main',[\n    'plex/core/headers',\n    'plex/cloud/interfaces/registry',\n    'httpinvoke',\n    'when',\n\n    // cloud interfaces\n    'plex/cloud/interfaces/api/home/root',\n    'plex/cloud/interfaces/api/home/users',\n    'plex/cloud/interfaces/api/invites',\n    'plex/cloud/interfaces/api/root',\n\n    'plex/cloud/interfaces/pms/main',\n    'plex/cloud/interfaces/pms/playlists',\n    'plex/cloud/interfaces/pms/social',\n\n    'plex/cloud/interfaces/devices',\n    'plex/cloud/interfaces/main',\n    'plex/cloud/interfaces/pins',\n    'plex/cloud/interfaces/root',\n    'plex/cloud/interfaces/users'\n], function(Headers, registry, httpinvoke, when) {\n    function Cloud() {\n        this.baseUrl = 'https://plex.tv';\n        this.headers = new Headers();\n\n        this.client_identifier = null;\n        this.token = null;\n\n        // Expose interfaces\n        registry.expose(this);\n        registry.exposeRoot(this);\n    }\n\n    Cloud.prototype.request = function(method, path, config) {\n        var url = this.baseUrl + path,\n            deferred = when.defer();\n\n        // Build request\n        config = typeof config !== 'undefined' ? config : {};\n        config.converters = {\n            'xml text': function(value) {\n                var serializer = new XMLSerializer();\n\n                return serializer.serializeToString(value);\n            },\n            'text xml': function(value) {\n                var parser = new DOMParser();\n\n                return parser.parseFromString(value, 'text/xml');\n            }\n        };\n        config.headers = this.headers.get(config.headers);\n\n        // Set extra headers\n        if(this.client_identifier !== null) {\n            config.headers['X-Plex-Client-Identifier'] = this.client_identifier;\n        }\n\n        if(this.token !== null) {\n            config.headers['X-Plex-Token'] = this.token;\n        }\n\n        // Send request\n        httpinvoke(url, method, config).then(function(response) {\n            // Handle response\n            if(response.statusCode >= 200 && response.statusCode <= 299) {\n                deferred.resolve(response.body);\n            } else {\n                deferred.reject(response.body, response.statusCode, response.headers, null, response.statusText);\n            }\n        }, function(statusText) {\n            // Socket error\n            deferred.reject(null, null, null, null, statusText);\n        });\n\n        return deferred.promise;\n    };\n\n    return Cloud;\n});\n","define('plex/server/interfaces/registry',[\r\n    'plex/core/interface_registry'\r\n], function(InterfaceRegistry) {\r\n    return new InterfaceRegistry();\r\n});\n","define('plex/server/interfaces/root',[\r\n    'plex/server/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.details = function() {\r\n        return this.$r('GET', '');\r\n    };\r\n\r\n    Root.prototype.identity = function() {\r\n        return this.$r('GET', 'identity');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/server/main',[\n    'plex/core/headers',\n    'plex/server/interfaces/registry',\n    'httpinvoke',\n    'when',\n\n    // server interfaces\n    'plex/server/interfaces/root'\n], function(Headers, registry, httpinvoke, when) {\n    function Server(baseUrl) {\n        this.baseUrl = baseUrl;\n        this.headers = new Headers();\n\n        this.client_identifier = null;\n        this.token = null;\n\n        // Expose interfaces\n        registry.expose(this);\n        registry.exposeRoot(this);\n    }\n\n    Server.prototype.request = function(method, path, config) {\n        var url = this.baseUrl + path,\n            deferred = when.defer();\n\n        // Build request\n        config = typeof config !== 'undefined' ? config : {};\n        config.converters = {\n            'xml text': function(value) {\n                var serializer = new XMLSerializer();\n\n                return serializer.serializeToString(value);\n            },\n            'text xml': function(value) {\n                var parser = new DOMParser();\n\n                return parser.parseFromString(value, 'text/xml');\n            }\n        };\n        config.headers = this.headers.get(config.headers);\n\n        // Set extra headers\n        if(this.client_identifier !== null) {\n            config.headers['X-Plex-Client-Identifier'] = this.client_identifier;\n        }\n\n        if(this.token !== null) {\n            config.headers['X-Plex-Token'] = this.token;\n        }\n\n        // Send request\n        httpinvoke(url, method, config).then(function(response) {\n            // Handle response\n            if(response.statusCode >= 200 && response.statusCode <= 299) {\n                deferred.resolve(response.body);\n            } else {\n                deferred.reject(response.body, response.statusCode, response.headers, null, response.statusText);\n            }\n        }, function(statusText) {\n            // Socket error\n            deferred.reject(null, null, null, null, statusText);\n        });\n\n        return deferred.promise;\n    };\n\n    return Server;\n});\n","define('plex/main',[\r\n    'plex/cloud/main',\r\n    'plex/server/main'\r\n], function(Cloud, Server) {\r\n    return {\r\n        Cloud: Cloud,\r\n        Server: Server,\r\n\r\n        cloud: new Cloud()\r\n    };\r\n});\n","define('plex',[\r\n    'plex/main'\r\n], function(plex) {\r\n    console.log('plex initialized');\r\n\r\n    return plex;\r\n});\n"]}