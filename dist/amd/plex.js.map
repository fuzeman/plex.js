{"version":3,"file":"plex.js","sources":["plex/core/utils.js","plex/core/headers.js","plex/core/http.js","plex/core/interface_registry.js","plex/cloud/interfaces/registry.js","plex/cloud/interfaces/api/home/root.js","plex/cloud/interfaces/api/home/users.js","plex/cloud/interfaces/api/invites.js","plex/cloud/interfaces/api/root.js","plex/cloud/interfaces/pms/main.js","plex/cloud/interfaces/pms/playlists.js","plex/cloud/interfaces/pms/social.js","plex/cloud/interfaces/devices.js","plex/cloud/interfaces/main.js","plex/cloud/interfaces/pins.js","plex/cloud/interfaces/root.js","plex/cloud/interfaces/users.js","plex/cloud/main.js","plex/server/interfaces/registry.js","plex/server/interfaces/plugins/messaging.js","plex/server/interfaces/root.js","plex/server/main.js","plex/main.js","plex.js"],"names":["define","utils","random","string","length","chars","isDefined","result","i","Math","round","url","query","encode","parameters","components","key","hasOwnProperty","push","encodeURIComponent","join","path","clone","obj","temp","constructor","value","UAParser","buildDefaultHeaders","parser","browser","getBrowser","os","getOS","X-Plex-Device","name","X-Plex-Device-Name","X-Plex-Platform","X-Plex-Platform-Version","version","substr","indexOf","X-Plex-Product","X-Plex-Version","Headers","this","current","prototype","get","headers","update","reset","setDevice","device","setPlatform","setProduct","httpinvoke","when","HttpClient","owner","baseUrl","converters","buildConverters","xmlParser","_x2js","corsExposedHeaders","self","xml text","XMLSerializer","serializeToString","text xml","DOMParser","parseFromString","X2JS","Error","xml_str2json","getSettings","config","settings","plex","useToken","request","method","deferred","defer","corsExposedHeadersDefaults","client_identifier","token","then","response","statusCode","resolve","body","reject","statusText","promise","Client","InterfaceRegistry","interfaces","set","cls","__path__","console","debug","expose","target","exposeRoot","apply","arguments","registry","Root","$c","$r","outputType","users","Users","id","pin","Invites","requested","requests","home","resources","includeHttps","Main","ip","Playlists","all","playlist","unwatched","deleteItem","Social","networks","Devices","scrobble","identifier","unscrobble","Pins","devices","pins","account","login","username","password","Authorization","btoa","Http","Cloud","http","pack","cerealizer","dumps","safe_encode","unpack","decodeURIComponent","safe_decode","loads","replace","rem","_repeat","atob","x","n","s","Messaging","call","args","callFunction","kwargs","data","ex","status","details","identity","Server","cloud","log"],"mappings":"AAAA,AAAAA,OAAA,qBAAA,WACA,GAAAC,IACAC,QACAC,OAAA,SAAAC,EAAAC,GAEAD,EAAAH,EAAAK,UAAAF,GAAAA,EAAA,GACAC,EAAAJ,EAAAK,UAAAD,GAAAA,EAAA,gEAKA,KAAA,GAFAE,GAAA,GAEAC,EAAAJ,EAAAI,EAAA,IAAAA,EACAD,GAAAF,EAAAI,KAAAC,MAAAD,KAAAP,UAAAG,EAAAD,OAAA,IAGA,OAAAG,KAIAI,KACAC,OACAC,OAAA,SAAAC,GAEA,IAAAb,EAAAK,UAAAQ,GACA,MAAA,EAIA,IAAAC,KAEA,KAAA,GAAAC,KAAAF,GACAA,EAAAG,eAAAD,IAIAD,EAAAG,KAAAC,mBAAAH,GAAA,IAAAG,mBAAAL,EAAAE,IAGA,OAAAD,GAAAK,KAAA,OAIAP,OAAA,SAAAQ,EAAAP,GACA,GAAAF,GAAAX,EAAAU,IAAAC,MAAAC,OAAAC,EAEA,OAAA,KAAAF,EAAAR,OAEAiB,EAGAA,EAAA,IAAAT,IAIAU,MAAA,SAAAC,GACA,GAAA,OAAAA,GAAA,gBAAAA,GACA,MAAAA,EAGA,IAAAC,GAAAD,EAAAE,aAEA,KAAA,GAAAT,KAAAO,GACAA,EAAAN,eAAAD,KAIAQ,EAAAR,GAAAf,EAAAqB,MAAAC,EAAAP,IAGA,OAAAQ,IAGAlB,UAAA,SAAAoB,GACA,QAAA,mBAAAA,IAAA,OAAAA,IAIA,OAAAzB,KC7EAD,OD+EA,qBC9EA,kBACA,aACA,SAAAC,EAAA0B,GACA,QAAAC,KACA,GAAAC,GAAA,GAAAF,GACAG,EAAAD,EAAAE,aACAC,EAAAH,EAAAI,OAEA,QACAC,gBAAAF,EAAAG,KACAC,qBAAA,KAEAC,kBAAAP,EAAAK,KACAG,0BAAAR,EAAAS,QAAAC,OAAA,EAAAV,EAAAS,QAAAE,QAAA,IAAA,IAEAC,iBAAA,UACAC,iBAAA,SAIA,QAAAC,KACAC,KAAAA,WAAAjB,IACAiB,KAAAC,QAAA7C,EAAAqB,MAAAuB,KAAAA,YAkEA,MA/DAD,GAAAG,UAAAC,IAAA,SAAAC,GACAA,EAAA,mBAAAA,GAAAA,IAGA,IAAA1C,GAAAN,EAAAqB,MAAAuB,KAAAC,QAEA,QAAAvC,EAAA,wBAEA,OAAAA,EAAA,mBAAA,OAAAA,EAAA,mBACAA,EAAA,sBAAAA,EAAA,kBAAA,KAAAA,EAAA,mBAAA,IACA,OAAAA,EAAA,kBACAA,EAAA,sBAAAA,EAAA,kBAEAA,EAAA,sBAAA,UAIA,KAAA,GAAAS,KAAAiC,GACAA,EAAAhC,eAAAD,KAIAT,EAAAS,GAAAiC,EAAAjC,GAGA,OAAAT,IAGAqC,EAAAG,UAAAG,OAAA,SAAAD,GACA,IAAA,GAAAjC,KAAAiC,GACAA,EAAAhC,eAAAD,KAIA6B,KAAAC,QAAA9B,GAAAiC,EAAAjC,KAIA4B,EAAAG,UAAAI,MAAA,WACAN,KAAAC,QAAA7C,EAAAqB,MAAAuB,KAAAA,aAGAD,EAAAG,UAAAK,UAAA,SAAAjB,EAAAkB,GACAR,KAAAK,QACAhB,gBAAAmB,EACAjB,qBAAAD,KAIAS,EAAAG,UAAAO,YAAA,SAAAnB,EAAAI,GACAM,KAAAK,QACAb,kBAAAF,EACAG,0BAAAC,KAIAK,EAAAG,UAAAQ,WAAA,SAAApB,EAAAI,GACAM,KAAAK,QACAR,iBAAAP,EACAQ,iBAAAJ,KAIAK,ICzFA5C,OAAA,kBACA,oBACA,kBACA,aACA,QACA,SAAA4C,EAAA3C,EAAAuD,EAAAC,GAGA,QAAAC,GAAAC,EAAAC,GACAf,KAAAc,MAAAA,EACAd,KAAAe,QAAAA,EAEAf,KAAAgB,WAAAhB,KAAAiB,kBACAjB,KAAAI,QAAA,GAAAL,GACAC,KAAAkB,UAAA,MAEAlB,KAAAmB,MAAA,KAVA,GAAAC,IAAA,gBAAA,mBAAA,eAAA,UAAA,gBAAA,SAmGA,OAtFAP,GAAAX,UAAAe,gBAAA,WACA,GAAAI,GAAArB,IAEA,QACAsB,WAAA,SAAAzC,GACA,OAAA,GAAA0C,gBAAAC,kBAAA3C,IAEA4C,WAAA,SAAA5C,GACA,GAAA,QAAAwC,EAAAH,UACA,OAAA,GAAAQ,YAAAC,gBAAA9C,EAAA,WAGA,IAAA,SAAAwC,EAAAH,UAAA,CAEA,IAAAU,KACA,KAAA,IAAAC,OAAA,uBAQA,OALA,QAAAR,EAAAF,QACAE,EAAAF,MAAA,GAAAS,OAIAP,EAAAF,MAAAW,aAAAjD,GAGA,KAAA,IAAAgD,OAAA,2BAAAR,EAAAH,cAKAL,EAAAX,UAAA6B,YAAA,SAAAC,GACA,GAAAC,KAYA,OAVA7E,GAAAK,UAAAuE,EAAAE,QACAD,EAAAD,EAAAE,WAGAF,GAAAE,MAIAD,EAAAE,SAAA/E,EAAAK,UAAAwE,EAAAE,UAAAF,EAAAE,UAAA,EAEAF,GAGApB,EAAAX,UAAAkC,QAAA,SAAAC,EAAA7D,EAAAwD,GACA,GAAAlE,GAAAkC,KAAAe,QAAAvC,EACA8D,EAAA1B,EAAA2B,QAGAN,EAAAjC,KAAA+B,YAAAC,EA+BA,OA5BAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAhB,WAAAhB,KAAAgB,WACAgB,EAAAZ,mBAAAA,EACAY,EAAAQ,4BAAA,EACAR,EAAA5B,QAAAJ,KAAAI,QAAAD,IAAA6B,EAAA5B,SAGA,OAAAJ,KAAAc,MAAA2B,oBACAT,EAAA5B,QAAA,4BAAAJ,KAAAc,MAAA2B,mBAGA,OAAAzC,KAAAc,MAAA4B,OAAAT,EAAAE,WACAH,EAAA5B,QAAA,gBAAAJ,KAAAc,MAAA4B,OAIA/B,EAAA7C,EAAAuE,EAAAL,GAAAW,KAAA,SAAAC,GAEAA,EAAAC,YAAA,KAAAD,EAAAC,YAAA,IACAP,EAAAQ,QAAAF,EAAAG,MAEAT,EAAAU,OAAAJ,EAAAG,KAAAH,EAAAC,WAAAD,EAAAxC,QAAA,KAAAwC,EAAAK,aAEA,SAAAA,GAEAX,EAAAU,OAAA,KAAA,KAAA,KAAA,KAAAC,KAGAX,EAAAY,UAIAC,OAAAtC,KC1GA1D,OAAA,gCACA,mBACA,SAAAC,GACA,QAAAgG,KACApD,KAAAqD,cA8DA,MA3DAD,GAAAlD,UAAAoD,IAAA,SAAAC,GACA,GAAA/E,GAAA+E,EAAAC,QAEA,IAAA,mBAAAhF,IAAA,OAAAA,EACA,KAAA,IAAAqD,OAAA,8CAAA0B,EAGA,IAAAnG,EAAAK,UAAAuC,KAAAqD,WAAA7E,IACA,KAAA,IAAAqD,OAAA,cAAArD,EAAA,uBAIAwB,MAAAqD,WAAA7E,GAAA+E,EAEAE,QAAAC,MAAA,4BAAAlF,IAGA4E,EAAAlD,UAAAyD,OAAA,SAAAC,GACA,IAAA,GAAAzF,KAAA6B,MAAAqD,WACArD,KAAAqD,WAAAjF,eAAAD,KAIAyF,EAAAzF,GAAA,GAAA6B,MAAAqD,WAAAlF,GAAAyF,GAEAH,QAAAC,MAAA,yBAAAvF,KAIAiF,EAAAlD,UAAA2D,WAAA,SAAAD,GACA,GAAAL,GAAAK,EAAA,GAEA,IAAAxG,EAAAK,UAAA8F,GAKA,IAAA,GAAApF,KAAAoF,GAEA,GAAA,IAAApF,EAAAyB,QAAA,OAAA2D,EAAAnF,eAAAD,GAAA,CAKA,GAAAf,EAAAK,UAAAmG,EAAAzF,IACA,KAAA,IAAA0D,OAAA,iBAAA1D,EAAA,mBAIAyF,GAAAzF,GAAA,SAAAkE,GACA,MAAA,YACA,MAAAA,GAAAyB,MAAAP,EAAAQ,aAEAR,EAAApF,IAEAsF,QAAAC,MAAA,2BAAAvF,KAIAiF,IClEAjG,ODoEA,kCCnEA,gCACA,SAAAiG,GACA,MAAA,IAAAA,KCHAjG,ODKA,uCCJA,kCACA,SAAA6G,GACA,QAAAC,GAAAC,GACAlE,KAAAkE,GAAAA,EAGAD,EAAA/D,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA4B,EAAAT,SAAA,IAAAhF,EAAAwD,IAGAiC,EAAA/D,UAAAmE,MAAA,WACA,MAAArE,MAAAmE,GAAA,MAAA,UAIAF,EAAAT,SAAA,YAEAQ,EAAAV,IAAAW,KAEA9G,OCvBA,wCACA,iCACA,mBACA,SAAA6G,EAAA5G,GACA,QAAAkH,GAAAJ,GACAlE,KAAAkE,GAAAA,EAGAI,EAAApE,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAiC,EAAAd,SAAA,IAAAhF,EAAAwD,IAGAsC,EAAApE,UAAAoE,UAAA,SAAAC,EAAAC,GACA,IAAApH,EAAAK,UAAA8G,GACA,KAAA,IAAA1C,MAIA,IAAA5D,KAOA,OALAb,GAAAK,UAAA+G,KACAvG,EAAA,IAAAuG,GAIAxE,KAAAmE,GAAA,OAAA/G,EAAAU,IAAAE,OAAAuG,EAAA,UAAAtG,KAIAqG,EAAAd,SAAA,kBAEAQ,EAAAV,IAAAgB,KAEAnH,OCpCA,qCACA,kCACA,SAAA6G,GACA,QAAAS,GAAAP,GACAlE,KAAAkE,GAAAA,EAGAO,EAAAvE,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAoC,EAAAjB,SAAA,IAAAhF,EAAAwD,IAGAyC,EAAAvE,UAAAwE,UAAA,WACA,MAAA1E,MAAAmE,GAAA,MAAA,cAGAM,EAAAvE,UAAAyE,SAAA,WACA,MAAA3E,MAAAmE,GAAA,MAAA,aAIAM,EAAAjB,SAAA,eAEAQ,EAAAV,IAAAmB,KAEAtH,OC3BA,kCACA,iCACA,mBACA,SAAA6G,EAAA5G,GACA,QAAA6G,GAAAC,GACAlE,KAAAkE,GAAAA,EAGAD,EAAA/D,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA4B,EAAAT,SAAA,IAAAhF,EAAAwD,IAGAiC,EAAA/D,UAAA0E,KAAA,WACA,MAAA5E,MAAAmE,GAAA,MAAA,SAGAF,EAAA/D,UAAA2E,UAAA,SAAAC,GAEA,GAAA7G,KAYA,OAVAb,GAAAK,UAAAqH,KAEA,iBAAAA,KACAA,EAAAA,EAAA,EAAA,GAGA7G,EAAA,aAAA6G,GAIA9E,KAAAmE,GAAA,MAAA/G,EAAAU,IAAAE,OAAA,YAAAC,KAGAgG,EAAA/D,UAAAmE,MAAA,WACA,MAAArE,MAAAmE,GAAA,MAAA,UAIAF,EAAAT,SAAA,OAEAQ,EAAAV,IAAAW,KAEA9G,OC7CA,kCACA,kCACA,SAAA6G,GACA,QAAAe,GAAAb,GACAlE,KAAAkE,GAAAA,EAGAa,EAAA7E,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GACA,MAAAhC,MAAAkE,GAAA9B,QAAAC,EAAA0C,EAAAvB,SAAA,IAAAhF,EAAAwD,IAGA+C,EAAA7E,UAAA8E,GAAA,WACA,MAAAhF,MAAAmE,GAAA,MAAA,OAIAY,EAAAvB,SAAA,SAEAQ,EAAAV,IAAAyB,KAEA5H,OCpBA,uCACA,kCACA,SAAA6G,GACA,QAAAiB,GAAAf,GACAlE,KAAAkE,GAAAA,EAGAe,EAAA/E,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA4C,EAAAzB,SAAA,IAAAhF,EAAAwD,IAGAiD,EAAA/E,UAAAgF,IAAA,SAAAC,GACA,MAAAnF,MAAAmE,GAAA,MAAAgB,EAAA,SAGAF,EAAA/E,UAAAkF,UAAA,SAAAD,GACA,MAAAnF,MAAAmE,GAAA,MAAAgB,EAAA,eAIAF,EAAA/E,UAAAmF,WAAA,SAAAF,EAAAZ,GACA,MAAAvE,MAAAmE,GAAA,SAAAgB,EAAA,UAAAZ,IAIAU,EAAAzB,SAAA,iBAEAQ,EAAAV,IAAA2B,KAEA9H,OChCA,oCACA,kCACA,SAAA6G,GACA,QAAAsB,GAAApB,GACAlE,KAAAkE,GAAAA,EAGAoB,EAAApF,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAiD,EAAA9B,SAAA,IAAAhF,EAAAwD,IAGAsD,EAAApF,UAAAqF,SAAA,WACA,MAAAvF,MAAAmE,GAAA,MAAA,aAIAmB,EAAA9B,SAAA,cAEAQ,EAAAV,IAAAgC,KAEAnI,OAAA,iCCtBA,kCACA,SAAA6G,GACA,QAAAwB,GAAAtB,GACAlE,KAAAkE,GAAAA,EAGAsB,EAAAtF,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAmD,EAAAhC,SAAA,IAAAhF,EAAAwD,IAGAwD,EAAAtF,UAAAsF,UAAA,SAAAjB,GACA,MAAAvE,MAAAmE,GAAA,SAAAI,EAAA,SAIAiB,EAAAhC,SAAA,WAEAQ,EAAAV,IAAAkC,KAEArI,OCvBA,8BACA,iCACA,mBACA,SAAA6G,EAAA5G,GACA,QAAA2H,GAAAb,GACAlE,KAAAkE,GAAAA,EAGAa,EAAA7E,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA0C,EAAAvB,SAAA,IAAAhF,EAAAwD,IAGA+C,EAAA7E,UAAAuF,SAAA,SAAAtH,EAAAuH,GACA,IAAAtI,EAAAK,UAAAU,KAAAf,EAAAK,UAAAiI,GACA,KAAA,IAAA7D,MAGA,OAAA7B,MAAAmE,GAAA,MAAA/G,EAAAU,IAAAE,OAAA,YACAG,IAAAA,EACAuH,WAAAA,MAIAX,EAAA7E,UAAAyF,WAAA,SAAAxH,EAAAuH,GACA,IAAAtI,EAAAK,UAAAU,KAAAf,EAAAK,UAAAiI,GACA,KAAA,IAAA7D,MAGA,OAAA7B,MAAAmE,GAAA,MAAA/G,EAAAU,IAAAE,OAAA,cACAG,IAAAA,EACAuH,WAAAA,MAKAX,EAAAvB,SAAA,KAEAQ,EAAAV,IAAAyB,KAEA5H,OC1CA,8BACA,kCACA,SAAA6G,GACA,QAAA4B,GAAA1B,GACAlE,KAAAkE,GAAAA,EAGA0B,EAAA1F,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAuD,EAAApC,SAAA,IAAAhF,EAAAwD,IAGA4D,EAAA1F,UAAAC,IAAA,SAAAoE,GACA,MAAAvE,MAAAmE,GAAA,MAAAI,EAAA,SAIAqB,EAAApC,SAAA,QAEAQ,EAAAV,IAAAsC,KCrBAzI,OAAA,8BACA,kCACA,SAAA6G,GACA,QAAAC,GAAAC,GACAlE,KAAAkE,GAAAA,EAGAD,EAAA/D,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA4B,EAAAT,SAAA,IAAAhF,EAAAwD,IAGAiC,EAAA/D,UAAA2F,QAAA,WACA,MAAA7F,MAAAmE,GAAA,MAAA,gBAGAF,EAAA/D,UAAA4F,KAAA,WACA,MAAA9F,MAAAmE,GAAA,OAAA,aAIAF,EAAAT,SAAA,GAEAQ,EAAAV,IAAAW,KCzBA9G,OAAA,+BACA,iCACA,mBACA,SAAA6G,EAAA5G,GACA,QAAAkH,GAAAJ,GACAlE,KAAAkE,GAAAA,EAGAI,EAAApE,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAAiC,EAAAd,SAAA,IAAAhF,EAAAwD,IAGAsC,EAAApE,UAAA6F,QAAA,SAAArD,GACA,GAAAtC,KAMA,OAJAhD,GAAAK,UAAAiF,KACAtC,EAAA,gBAAAsC,GAGA1C,KAAAmE,GAAA,MAAA,WACA/D,QAAAA,KAIAkE,EAAApE,UAAA8F,MAAA,SAAAC,EAAAC,GACA,IAAA9I,EAAAK,UAAAwI,KAAA7I,EAAAK,UAAAyI,GACA,KAAA,IAAArE,MAGA,OAAA7B,MAAAmE,GAAA,OAAA,eACA/D,SACA+F,cAAA,SAAAC,KAAAH,EAAA,IAAAC,IAEAhE,MACAC,UAAA,MAMAmC,EAAAd,SAAA,SAEAQ,EAAAV,IAAAgB,KC7CAnH,OAAA,mBACA,iBACA,iCAGA,sCACA,uCACA,oCACA,iCAEA,iCACA,sCACA,mCAEA,gCACA,6BACA,6BACA,6BACA,+BACA,SAAAkJ,EAAArC,GACA,QAAAsC,KACAtG,KAAAuG,KAAA,GAAAF,GAAAlD,OAAAnD,KAAA,mBAEAA,KAAAyC,kBAAA,KACAzC,KAAA0C,MAAA,KAGAsB,EAAAL,OAAA3D,MACAgE,EAAAH,WAAA7D,MAOA,MAJAsG,GAAApG,UAAAkC,QAAA,SAAAC,EAAA7D,EAAAwD,GACA,MAAAhC,MAAAuG,KAAAnE,QAAAC,EAAA7D,EAAAwD,IAGAsE,IAEAnJ,OCrCA,mCACA,gCACA,SAAAiG,GACA,MAAA,IAAAA,KCHAjG,ODKA,4CCJA,kCACA,QACA,SAAA6G,EAAApD,GAEA,QAAA4F,GAAA3H,GACA,GAAAnB,EASA,OANAA,GAAA+I,WAAAC,MAAA7H,GAGAnB,EAAAiJ,EAAAjJ,GACAA,EAAAY,mBAAAZ,GAKA,QAAAkJ,GAAA/H,GACA,GAAAnB,EAOA,OAJAA,GAAAmJ,mBAAAhI,GACAnB,EAAAoJ,EAAApJ,GAGA+I,WAAAM,MAAArJ,GAGA,QAAAiJ,GAAA9H,GACA,MAAAuH,MAAAvH,GAAAmI,QAAA,MAAA,KAAAA,QAAA,MAAA,KAAAA,QAAA,MAAA,KAGA,QAAAF,GAAAjI,GACAA,EAAAA,EAAAmI,QAAA,MAAA,KAAAA,QAAA,MAAA,KAAAA,QAAA,MAAA,IAEA,IAAAC,GAAApI,EAAAtB,OAAA,CAMA,OAJA0J,GAAA,IACApI,GAAAqI,EAAA,IAAA,EAAAD,IAGAE,KAAAtI,GAGA,QAAAqI,GAAAE,EAAAC,GAEA,IADA,GAAAC,GAAA,GACAD,IAAA,GAAAC,GAAAF,CACA,OAAAE,GAIA,QAAAC,GAAArD,GACAlE,KAAAkE,GAAAA,EAGAqD,EAAArH,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GASA,MARAA,GAAA,mBAAAA,GAAAA,KAEA,IAAAxD,EAAAoB,QAAA,OAEApB,EAAA+I,EAAA/D,SAAAhF,GAIAwB,KAAAkE,GAAA9B,QAAAC,EAAA7D,EAAAwD,IAGAuF,EAAArH,UAAAsH,KAAA,SAAA9B,EAAAvH,EAAAsJ,EAAAzF,GAEA,GAAAxD,GAAA,cAAAkH,EAAA,cAAAvH,CAOA,OAJAsJ,GAAAlK,OAAA,IACAiB,GAAA,IAAAiJ,EAAAlJ,KAAA,MAGAyB,KAAAmE,GAAA,MAAA3F,EAAAwD,IAGAuF,EAAArH,UAAAwH,aAAA,SAAAhC,EAAApG,EAAAmI,EAAAE,EAAA3F,GACA,GAAAM,GAAA1B,EAAA2B,OAqBA,OAlBAkF,GAAA,mBAAAA,GAAAA,KACAE,EAAA,mBAAAA,GAAAA,KAGA3H,KAAAwH,KAAA9B,EAAA,YACAiB,EAAArH,GACAkH,EAAAiB,GACAjB,EAAAmB,IACA3F,GAAAW,KAAA,SAAAiF,GACA,IACAtF,EAAAQ,QAAA8D,EAAAgB,IACA,MAAAC,GACAvF,EAAAU,OAAA,QAEA,SAAA4E,EAAAE,GACAxF,EAAAU,OAAA4E,EAAAE,KAGAxF,EAAAY,SAIAqE,EAAA/D,SAAA,yBAEAQ,EAAAV,IAAAiE,KC5GApK,OAAA,+BACA,mCACA,SAAA6G,GACA,QAAAC,GAAAC,GACAlE,KAAAkE,GAAAA,EAGAD,EAAA/D,UAAAiE,GAAA,SAAA9B,EAAA7D,EAAAwD,GAIA,MAHAA,GAAA,mBAAAA,GAAAA,KACAA,EAAAoC,WAAA,MAEApE,KAAAkE,GAAA9B,QAAAC,EAAA4B,EAAAT,SAAA,IAAAhF,EAAAwD,IAGAiC,EAAA/D,UAAA6H,QAAA,WACA,MAAA/H,MAAAmE,GAAA,MAAA,KAGAF,EAAA/D,UAAA8H,SAAA,WACA,MAAAhI,MAAAmE,GAAA,MAAA,aAIAF,EAAAT,SAAA,GAEAQ,EAAAV,IAAAW,KAEA9G,OC3BA,oBACA,iBACA,kCAGA,2CAEA,+BACA,SAAAkJ,EAAArC,GACA,QAAAiE,GAAAlH,GACAf,KAAAuG,KAAA,GAAAF,GAAAlD,OAAAnD,KAAAe,GAEAf,KAAAyC,kBAAA,KACAzC,KAAA0C,MAAA,KAGAsB,EAAAL,OAAA3D,MACAgE,EAAAH,WAAA7D,MAOA,MAJAiI,GAAA/H,UAAAkC,QAAA,SAAAC,EAAA7D,EAAAwD,GACA,MAAAhC,MAAAuG,KAAAnE,QAAAC,EAAA7D,EAAAwD,IAGAiG,IAEA9K,OAAA,aCzBA,kBACA,mBACA,mBACA,SAAAmJ,EAAA2B,EAAA7K,GACA,OACAkJ,MAAAA,EACA2B,OAAAA,EAEAC,MAAA,GAAA5B,GACAlJ,MAAAA,KAGAD,OAAA,QCZA,aACA,SAAA+E,GAGA,MAFAuB,SAAA0E,IAAA,oBAEAjG;AvnEA,ADoEA;ACnEA;AACA;AACA;AACA;ACJA,ADKA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA,ADuBA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvrzBA,AD0BA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA,ADaA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["define('plex/core/utils',[], function() {\r\n    var utils = {\r\n        random: {\r\n            string: function(length, chars) {\r\n                // Set parameter defaults\r\n                length = utils.isDefined(length) ? length : 16;\r\n                chars = utils.isDefined(chars) ? chars : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n                // Generate string\r\n                var result = '';\r\n\r\n                for (var i = length; i > 0; --i) {\r\n                    result += chars[Math.round(Math.random() * (chars.length - 1))];\r\n                }\r\n\r\n                return result;\r\n            }\r\n        },\r\n\r\n        url: {\r\n            query: {\r\n                encode: function(parameters) {\r\n                    // Check if the `parameters` are valid\r\n                    if(!utils.isDefined(parameters)) {\r\n                        return '';\r\n                    }\r\n\r\n                    // Build query string\r\n                    var components = [];\r\n\r\n                    for(var key in parameters) {\r\n                        if(!parameters.hasOwnProperty(key)) {\r\n                            continue;\r\n                        }\r\n\r\n                        components.push(encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]));\r\n                    }\r\n\r\n                    return components.join('&');\r\n                }\r\n            },\r\n\r\n            encode: function(path, parameters) {\r\n                var query = utils.url.query.encode(parameters);\r\n\r\n                if(query.length === 0) {\r\n                    // No parameters provided\r\n                    return path;\r\n                }\r\n\r\n                return path + '?' + query;\r\n            }\r\n        },\r\n\r\n        clone: function(obj) {\r\n            if (obj === null || typeof obj !== 'object') {\r\n                return obj;\r\n            }\r\n\r\n            var temp = obj.constructor();\r\n\r\n            for (var key in obj) {\r\n                if(!obj.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                temp[key] = utils.clone(obj[key]);\r\n            }\r\n\r\n            return temp;\r\n        },\r\n\r\n        isDefined: function(value) {\r\n            return !!(typeof value !== 'undefined' && value !== null);\r\n        }\r\n    };\r\n\r\n    return utils;\r\n});\n","define('plex/core/headers',[\r\n    'plex/core/utils',\r\n    'ua-parser'\r\n], function(utils, UAParser) {\r\n    function buildDefaultHeaders() {\r\n        var parser = new UAParser(),\r\n            browser = parser.getBrowser(),\r\n            os = parser.getOS();\r\n\r\n        return {\r\n            'X-Plex-Device': os.name,\r\n            'X-Plex-Device-Name': null,\r\n\r\n            'X-Plex-Platform': browser.name,\r\n            'X-Plex-Platform-Version': browser.version.substr(0, browser.version.indexOf('.', 3)),\r\n\r\n            'X-Plex-Product': 'plex.js',\r\n            'X-Plex-Version': '1.0.0'\r\n        };\r\n    }\r\n\r\n    function Headers() {\r\n        this.default = buildDefaultHeaders();\r\n        this.current = utils.clone(this.default);\r\n    }\r\n\r\n    Headers.prototype.get = function(headers) {\r\n        headers = typeof headers !== 'undefined' ? headers : {};\r\n\r\n        // Merge headers\r\n        var result = utils.clone(this.current);\r\n\r\n        if(result['X-Plex-Device-Name'] === null) {\r\n            // Automatically generate device name\r\n            if(result['X-Plex-Product'] !== null && result['X-Plex-Platform'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'] + ' (' + result['X-Plex-Platform'] + ')';\r\n            } else if(result['X-Plex-Product'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'];\r\n            } else {\r\n                result['X-Plex-Device-Name'] = 'plex.js';\r\n            }\r\n        }\r\n\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            result[key] = headers[key];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Headers.prototype.update = function(headers) {\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            this.current[key] = headers[key];\r\n        }\r\n    };\r\n\r\n    Headers.prototype.reset = function() {\r\n        this.current = utils.clone(this.default);\r\n    };\r\n\r\n    Headers.prototype.setDevice = function(name, device) {\r\n        this.update({\r\n            'X-Plex-Device': device,\r\n            'X-Plex-Device-Name': name\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setPlatform = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Platform': name,\r\n            'X-Plex-Platform-Version': version\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setProduct = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Product': name,\r\n            'X-Plex-Version': version\r\n        });\r\n    };\r\n\r\n    return Headers;\r\n});\n","define('plex/core/http',[\r\n    'plex/core/headers',\r\n    'plex/core/utils',\r\n    'httpinvoke',\r\n    'when'\r\n], function(Headers, utils, httpinvoke, when) {\r\n    var corsExposedHeaders = ['Cache-Control', 'Content-Language', 'Content-Type', 'Expires', 'Last-Modified', 'Pragma'];\r\n\r\n    function HttpClient(owner, baseUrl) {\r\n        this.owner = owner;\r\n        this.baseUrl = baseUrl;\r\n\r\n        this.converters = this.buildConverters();\r\n        this.headers = new Headers();\r\n        this.xmlParser = 'dom';\r\n\r\n        this._x2js = null;\r\n    }\r\n\r\n    HttpClient.prototype.buildConverters = function() {\r\n        var self = this;\r\n\r\n        return {\r\n            'xml text': function(value) {\r\n                return (new XMLSerializer()).serializeToString(value);\r\n            },\r\n            'text xml': function(value) {\r\n                if(self.xmlParser === 'dom') {\r\n                    return (new DOMParser()).parseFromString(value, 'text/xml');\r\n                }\r\n\r\n                if(self.xmlParser === 'x2js') {\r\n                    // Check if x2js is available\r\n                    if (!X2JS) {\r\n                        throw new Error(\"Missing X2JS library\");\r\n                    }\r\n\r\n                    if(self._x2js === null) {\r\n                        self._x2js = new X2JS();\r\n                    }\r\n\r\n                    // Parse response\r\n                    return self._x2js.xml_str2json(value);\r\n                }\r\n\r\n                throw new Error('Unknown \"responseType\": ' + self.xmlParser);\r\n            }\r\n        };\r\n    };\r\n\r\n    HttpClient.prototype.getSettings = function(config) {\r\n        var settings = {};\r\n\r\n        if(utils.isDefined(config.plex)) {\r\n            settings = config.plex;\r\n\r\n            // Remove `plex` from request configuration\r\n            delete config.plex;\r\n        }\r\n\r\n        // Set defaults\r\n        settings.useToken = utils.isDefined(settings.useToken) ? settings.useToken : true;\r\n\r\n        return settings;\r\n    };\r\n\r\n    HttpClient.prototype.request = function(method, path, config) {\r\n        var url = this.baseUrl + path,\r\n            deferred = when.defer();\r\n\r\n        // Retrieve plex settings\r\n        var settings = this.getSettings(config);\r\n\r\n        // Build request\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.converters = this.converters;\r\n        config.corsExposedHeaders = corsExposedHeaders;\r\n        config.corsExposedHeadersDefaults = false;\r\n        config.headers = this.headers.get(config.headers);\r\n\r\n        // Set extra headers\r\n        if(this.owner.client_identifier !== null) {\r\n            config.headers['X-Plex-Client-Identifier'] = this.owner.client_identifier;\r\n        }\r\n\r\n        if(this.owner.token !== null && settings.useToken) {\r\n            config.headers['X-Plex-Token'] = this.owner.token;\r\n        }\r\n\r\n        // Send request\r\n        httpinvoke(url, method, config).then(function(response) {\r\n            // Handle response\r\n            if(response.statusCode >= 200 && response.statusCode <= 299) {\r\n                deferred.resolve(response.body);\r\n            } else {\r\n                deferred.reject(response.body, response.statusCode, response.headers, null, response.statusText);\r\n            }\r\n        }, function(statusText) {\r\n            // Socket error\r\n            deferred.reject(null, null, null, null, statusText);\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return {\r\n        Client: HttpClient\r\n    };\r\n});\n","define('plex/core/interface_registry',[\n    'plex/core/utils'\n], function(utils) {\n    function InterfaceRegistry() {\n        this.interfaces = {};\n    }\n\n    InterfaceRegistry.prototype.set = function(cls) {\n        var path = cls.__path__;\n\n        if(typeof path === 'undefined' || path === null) {\n            throw new Error('Interface is missing a \"__path__\" attribute', cls);\n        }\n\n        if(utils.isDefined(this.interfaces[path])) {\n            throw new Error('Interface \"' + path + '\" already registered');\n        }\n\n        // Register interface\n        this.interfaces[path] = cls;\n\n        console.debug('Registered interface \"%s\"', path);\n    };\n\n    InterfaceRegistry.prototype.expose = function(target) {\n        for(var key in this.interfaces) {\n            if(!this.interfaces.hasOwnProperty(key)) {\n                continue;\n            }\n\n            target[key] = new this.interfaces[key](target);\n\n            console.debug('Exposed interface \"%s\"', key);\n        }\n    };\n\n    InterfaceRegistry.prototype.exposeRoot = function(target) {\n        var cls = target[''];\n\n        if(!utils.isDefined(cls)) {\n            return;\n        }\n\n        // Apply root method proxies to `target`\n        for(var key in cls) {\n            // Ignore class attributes, and attributes starting with '$'\n            if(key.indexOf('$') === 0 || cls.hasOwnProperty(key)) {\n                continue;\n            }\n\n            // Ensure `target` proxy doesn't already exist\n            if(utils.isDefined(target[key])) {\n                throw new Error('Method proxy \"' + key + '\" already exists');\n            }\n\n            // Create method proxy\n            target[key] = (function(method) {\n                return function() {\n                    return method.apply(cls, arguments);\n                };\n            })(cls[key]);\n\n            console.debug('Exposed root method \"%s\"', key);\n        }\n    };\n\n    return InterfaceRegistry;\n});\n","define('plex/cloud/interfaces/registry',[\r\n    'plex/core/interface_registry'\r\n], function(InterfaceRegistry) {\r\n    return new InterfaceRegistry();\r\n});\n","define('plex/cloud/interfaces/api/home/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api/home';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/api/home/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.switch = function(id, pin) {\r\n        if(!utils.isDefined(id)) {\r\n            throw new Error();\r\n        }\r\n\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(pin)) {\r\n            parameters['pin'] = pin;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('POST', utils.url.encode(id + '/switch', parameters));\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/api/home/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/interfaces/api/invites',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Invites($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Invites.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Invites.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Invites.prototype.requested = function() {\r\n        return this.$r('GET', 'requested');\r\n    };\r\n\r\n    Invites.prototype.requests = function() {\r\n        return this.$r('GET', 'requests');\r\n    };\r\n\r\n    // Register interface\r\n    Invites.__path__ = '/api/invites';\r\n\r\n    registry.set(Invites);\r\n});\n","define('plex/cloud/interfaces/api/root',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.home = function() {\r\n        return this.$r('GET', 'home');\r\n    };\r\n\r\n    Root.prototype.resources = function(includeHttps) {\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(includeHttps)) {\r\n            // Convert boolean to integer\r\n            if(typeof includeHttps === 'boolean') {\r\n                includeHttps = includeHttps ? 1 : 0;\r\n            }\r\n\r\n            parameters['includeHttps'] = includeHttps;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('GET', utils.url.encode('resources', parameters));\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/pms/main',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.ip = function() {\r\n        return this.$r('GET', 'ip');\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/pms/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/pms/playlists',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Playlists($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Playlists.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Playlists.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Playlists.prototype.all = function(playlist) {\r\n        return this.$r('GET', playlist + '/all');\r\n    };\r\n\r\n    Playlists.prototype.unwatched = function(playlist) {\r\n        return this.$r('GET', playlist + '/unwatched');\r\n    };\r\n\r\n    // Items\r\n    Playlists.prototype.deleteItem = function(playlist, id) {\r\n        return this.$r('DELETE', playlist + '/items/' + id);\r\n    };\r\n\r\n    // Register interface\r\n    Playlists.__path__ = '/pms/playlists';\r\n\r\n    registry.set(Playlists);\r\n});\n","define('plex/cloud/interfaces/pms/social',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Social($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Social.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Social.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Social.prototype.networks = function() {\r\n        return this.$r('GET', 'networks');\r\n    };\r\n\r\n    // Register interface\r\n    Social.__path__ = '/pms/social';\r\n\r\n    registry.set(Social);\r\n});\n","define('plex/cloud/interfaces/devices',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Devices($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Devices.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Devices.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Devices.prototype.delete = function(id) {\r\n        return this.$r('DELETE', id + '.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Devices.__path__ = '/devices';\r\n\r\n    registry.set(Devices);\r\n});\n","define('plex/cloud/interfaces/main',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.scrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('scrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    Main.prototype.unscrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('unscrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/pins',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Pins($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Pins.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Pins.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Pins.prototype.get = function(id) {\r\n        return this.$r('GET', id + '.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Pins.__path__ = '/pins';\r\n\r\n    registry.set(Pins);\r\n});\n","define('plex/cloud/interfaces/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.devices = function() {\r\n        return this.$r('GET', 'devices.xml');\r\n    };\r\n\r\n    Root.prototype.pins = function() {\r\n        return this.$r('POST', 'pins.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.account = function(token) {\r\n        var headers = {};\r\n\r\n        if(utils.isDefined(token)) {\r\n            headers['X-Plex-Token'] = token;\r\n        }\r\n\r\n        return this.$r('GET', 'account', {\r\n            headers: headers\r\n        });\r\n    };\r\n\r\n    Users.prototype.login = function(username, password) {\r\n        if(!utils.isDefined(username) || !utils.isDefined(password)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('POST', 'sign_in.xml', {\r\n            headers: {\r\n                'Authorization': 'Basic ' + btoa(username + ':' + password)\r\n            },\r\n            plex: {\r\n                useToken: false\r\n            }\r\n        });\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/main',[\n    'plex/core/http',\n    'plex/cloud/interfaces/registry',\n\n    // cloud interfaces\n    'plex/cloud/interfaces/api/home/root',\n    'plex/cloud/interfaces/api/home/users',\n    'plex/cloud/interfaces/api/invites',\n    'plex/cloud/interfaces/api/root',\n\n    'plex/cloud/interfaces/pms/main',\n    'plex/cloud/interfaces/pms/playlists',\n    'plex/cloud/interfaces/pms/social',\n\n    'plex/cloud/interfaces/devices',\n    'plex/cloud/interfaces/main',\n    'plex/cloud/interfaces/pins',\n    'plex/cloud/interfaces/root',\n    'plex/cloud/interfaces/users'\n], function(Http, registry) {\n    function Cloud() {\n        this.http = new Http.Client(this, 'https://plex.tv');\n\n        this.client_identifier = null;\n        this.token = null;\n\n        // Expose interfaces\n        registry.expose(this);\n        registry.exposeRoot(this);\n    }\n\n    Cloud.prototype.request = function(method, path, config) {\n        return this.http.request(method, path, config);\n    };\n\n    return Cloud;\n});\n","define('plex/server/interfaces/registry',[\r\n    'plex/core/interface_registry'\r\n], function(InterfaceRegistry) {\r\n    return new InterfaceRegistry();\r\n});\n","define('plex/server/interfaces/plugins/messaging',[\r\n    'plex/server/interfaces/registry',\r\n    'when'\r\n], function(registry, when) {\r\n    // Private methods\r\n    function pack(value) {\r\n        var result;\r\n\r\n        // dump value to string\r\n        result = cerealizer.dumps(value);\r\n\r\n        // encode value to a URL safe format\r\n        result = safe_encode(result);\r\n        result = encodeURIComponent(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    function unpack(value) {\r\n        var result;\r\n\r\n        // decode value from URL safe format\r\n        result = decodeURIComponent(value);\r\n        result = safe_decode(result);\r\n\r\n        // load value from string\r\n        return cerealizer.loads(result);\r\n    }\r\n\r\n    function safe_encode(value) {\r\n        return btoa(value).replace(/\\//g, '@').replace(/\\+/g, '*').replace(/\\=/g, '_');\r\n    }\r\n\r\n    function safe_decode(value) {\r\n        value = value.replace(/\\@/g, '/').replace(/\\*/g, '+').replace(/\\_/g, '=');\r\n\r\n        var rem = value.length % 4;\r\n\r\n        if(rem > 0) {\r\n            value += _repeat('=', 4 - rem);\r\n        }\r\n\r\n        return atob(value);\r\n    }\r\n\r\n    function _repeat(x, n) {\r\n        var s = '';\r\n        while (n-- > 0) s += x;\r\n        return s;\r\n    }\r\n\r\n    // Messaging interface\r\n    function Messaging($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Messaging.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n\r\n        if(path.indexOf('/') !== 0) {\r\n            // Append base interface path\r\n            path = Messaging.__path__ + path;\r\n        }\r\n\r\n        // Send request\r\n        return this.$c.request(method, path, config);\r\n    };\r\n\r\n    Messaging.prototype.call = function(identifier, key, args, config) {\r\n        // Generate path\r\n        var path = '/:/plugins/' + identifier + '/messaging/' + key;\r\n\r\n        // Append arguments to path\r\n        if(args.length > 0) {\r\n            path += '/' + args.join('/');\r\n        }\r\n\r\n        return this.$r('GET', path, config);\r\n    };\r\n\r\n    Messaging.prototype.callFunction = function(identifier, name, args, kwargs, config) {\r\n        var deferred = when.defer();\r\n\r\n        // Set parameter defaults\r\n        args = typeof args !== 'undefined' ? args : [];\r\n        kwargs = typeof kwargs !== 'undefined' ? kwargs : {};\r\n\r\n        // Call function\r\n        this.call(identifier, 'function', [\r\n            safe_encode(name),\r\n            pack(args),\r\n            pack(kwargs)\r\n        ], config).then(function(data) {\r\n            try {\r\n                deferred.resolve(unpack(data));\r\n            } catch(ex) {\r\n                deferred.reject(null);\r\n            }\r\n        }, function(data, status) {\r\n            deferred.reject(data, status);\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    // Register interface\r\n    Messaging.__path__ = '/:/plugins/*/messaging';\r\n\r\n    registry.set(Messaging);\r\n});\n","define('plex/server/interfaces/root',[\r\n    'plex/server/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.details = function() {\r\n        return this.$r('GET', '');\r\n    };\r\n\r\n    Root.prototype.identity = function() {\r\n        return this.$r('GET', 'identity');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/server/main',[\n    'plex/core/http',\n    'plex/server/interfaces/registry',\n\n    // server interfaces\n    'plex/server/interfaces/plugins/messaging',\n\n    'plex/server/interfaces/root'\n], function(Http, registry) {\n    function Server(baseUrl) {\n        this.http = new Http.Client(this, baseUrl);\n\n        this.client_identifier = null;\n        this.token = null;\n\n        // Expose interfaces\n        registry.expose(this);\n        registry.exposeRoot(this);\n    }\n\n    Server.prototype.request = function(method, path, config) {\n        return this.http.request(method, path, config);\n    };\n\n    return Server;\n});\n","define('plex/main',[\r\n    'plex/cloud/main',\r\n    'plex/server/main',\r\n    'plex/core/utils'\r\n], function(Cloud, Server, utils) {\r\n    return {\r\n        Cloud: Cloud,\r\n        Server: Server,\r\n\r\n        cloud: new Cloud(),\r\n        utils: utils\r\n    };\r\n});\n","define('plex',[\r\n    'plex/main'\r\n], function(plex) {\r\n    console.log('plex initialized');\r\n\r\n    return plex;\r\n});\n"]}