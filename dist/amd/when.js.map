{"version":3,"file":"when.js","sources":["lib/env.js","lib/TimeoutError.js","lib/decorators/timed.js","lib/state.js","lib/apply.js","lib/decorators/array.js","lib/decorators/flow.js","lib/decorators/fold.js","lib/decorators/inspect.js","lib/decorators/iterate.js","lib/decorators/progress.js","lib/decorators/with.js","lib/format.js","lib/decorators/unhandledRejection.js","lib/makePromise.js","lib/Scheduler.js","lib/Promise.js","when.js"],"names":["define","require","isNode","process","Object","prototype","toString","call","hasMutationObserver","MutationObserver","WebKitMutationObserver","initMutationObserver","run","f","scheduled","node","document","createTextNode","o","observe","characterData","i","data","MutationObs","capturedSetTimeout","setTimeout","setTimer","ms","clearTimer","t","clearTimeout","asap","nextTick","vertxRequire","vertx","cancelTimer","runOnLoop","runOnContext","amd","factory","module","exports","TimeoutError","message","Error","this","name","captureStackTrace","create","constructor","x","y","env","Promise","handleDelay","h","resolveDelay","resolve","onTimeout","reason","e","reject","delay","p","_beget","_handler","fold","timeout","visit","notify","toPendingState","state","toRejectedState","toFulfilledState","value","inspect","handler","pending","fulfilled","rejected","makeApply","apply","thisArg","args","_defer","l","length","params","Array","callAndResolve","c","callAndResolveNext","arguments","tryCatchResolve","resolver","applier","any","promises","handleFulfill","errors","handleReject","resolved","push","become","_visitRemaining","RangeError","some","n","fulfill","results","nFulfill","nReject","Math","max","min","map","_traverse","filter","predicate","a","slice","then","keep","filterSync","filtered","j","settle","all","settleOne","toPromise","_unreport","reduce","ar","liftCombine","reduceRight","arr","z","applyFold","spread","onFulfilled","array","rejectInvalidPredicate","TypeError","evaluatePredicate","isError","maybeThenable","identity","createCatchFilter","runSideEffect","propagate","result","propagateValue","origCatch","done","onResult","onError","receiver","otherwise","onRejected","ensure","orElse","defaultValue","tap","onFulfilledSideEffect","promise","to","iterate","condition","unfold","unspool","next","item","newSeed","seed","progress","onProgress","withThis","child","chain","formatError","s","stack","formatObject","String","JSON","tryStringify","stringify","throwit","noop","format","report","r","handled","reported","logError","id","unreport","indexOf","splice","logInfo","enqueue","tasks","running","flush","shift","localConsole","console","error","log","info","onPotentiallyUnhandledRejection","rejection","onPotentiallyUnhandledRejectionHandled","onFatalRejection","environment","Handler","init","promiseResolve","promiseReject","promiseNotify","Pending","isPromise","Async","getHandler","Rejected","never","foreverPendingPromise","defer","begetFrom","parent","join","context","traverseWith","snd","traverse","tryCatch2","tryMap","mapAt","traverseAt","settleAt","Fulfilled","getHandlerMaybeThenable","visitRemaining","start","markAsHandled","race","runRace","getHandlerUntrusted","untrustedThen","Thenable","FailIfRejected","inheritedContext","createContext","consumers","thenable","AssimilateTask","errorId","_report","ReportTask","UnreportTask","cycle","ContinuationTask","continuation","ProgressTask","_then","tryAssimilate","Fold","failIfRejected","runContinuation1","enterContext","tryCatchReject","exitContext","runContinuation3","tryCatchReject3","runNotify","tryCatchReturn","b","inherit","Parent","Child","objectCreate","initEmitRejection","emit","type","self","CustomEvent","hasCustomEvent","ev","detail","key","bubbles","cancelable","dispatchEvent","scheduler","emitRejection","proto","when","fail","_state","q","cont","afterQueue","foreverPendingHandler","_resolve","_reject","_notify","Scheduler","async","_async","_running","_queue","_queueLen","_afterQueue","_afterQueueLen","drain","_drain","task","makePromise","lift","attempt","Deferred","isPromiseLike","mapFunc","timed","flow","generate","unhandledRejection","feature"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxljKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA,ADyDA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvg6BA;AC/5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA,ADiFA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClsourcesContent":["/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/\n(function(define) { 'use strict';\ndefine('lib/env',['require'],function(require) {\n\t/*jshint maxcomplexity:6*/\n\n\t// Sniff \"best\" async scheduling option\n\t// Prefer process.nextTick or MutationObserver, then check for\n\t// setTimeout, and finally vertx, since its the only env that doesn't\n\t// have setTimeout\n\n\tvar MutationObs;\n\tvar capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;\n\n\t// Default env\n\tvar setTimer = function(f, ms) { return setTimeout(f, ms); };\n\tvar clearTimer = function(t) { return clearTimeout(t); };\n\tvar asap = function (f) { return capturedSetTimeout(f, 0); };\n\n\t// Detect specific env\n\tif (isNode()) { // Node\n\t\tasap = function (f) { return process.nextTick(f); };\n\n\t} else if (MutationObs = hasMutationObserver()) { // Modern browser\n\t\tasap = initMutationObserver(MutationObs);\n\n\t} else if (!capturedSetTimeout) { // vert.x\n\t\tvar vertxRequire = require;\n\t\tvar vertx = vertxRequire('vertx');\n\t\tsetTimer = function (f, ms) { return vertx.setTimer(ms, f); };\n\t\tclearTimer = vertx.cancelTimer;\n\t\tasap = vertx.runOnLoop || vertx.runOnContext;\n\t}\n\n\treturn {\n\t\tsetTimer: setTimer,\n\t\tclearTimer: clearTimer,\n\t\tasap: asap\n\t};\n\n\tfunction isNode () {\n\t\treturn typeof process !== 'undefined' &&\n\t\t\tObject.prototype.toString.call(process) === '[object process]';\n\t}\n\n\tfunction hasMutationObserver () {\n\t\treturn (typeof MutationObserver === 'function' && MutationObserver) ||\n\t\t\t(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);\n\t}\n\n\tfunction initMutationObserver(MutationObserver) {\n\t\tvar scheduled;\n\t\tvar node = document.createTextNode('');\n\t\tvar o = new MutationObserver(run);\n\t\to.observe(node, { characterData: true });\n\n\t\tfunction run() {\n\t\t\tvar f = scheduled;\n\t\t\tscheduled = void 0;\n\t\t\tf();\n\t\t}\n\n\t\tvar i = 0;\n\t\treturn function (f) {\n\t\t\tscheduled = f;\n\t\t\tnode.data = (i ^= 1);\n\t\t};\n\t}\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/TimeoutError',[],function() {\n\n\t/**\n\t * Custom error type for promises rejected by promise.timeout\n\t * @param {string} message\n\t * @constructor\n\t */\n\tfunction TimeoutError (message) {\n\t\tError.call(this);\n\t\tthis.message = message;\n\t\tthis.name = TimeoutError.name;\n\t\tif (typeof Error.captureStackTrace === 'function') {\n\t\t\tError.captureStackTrace(this, TimeoutError);\n\t\t}\n\t}\n\n\tTimeoutError.prototype = Object.create(Error.prototype);\n\tTimeoutError.prototype.constructor = TimeoutError;\n\n\treturn TimeoutError;\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/timed',['require','../env','../TimeoutError'],function(require) {\n\n\tvar env = require('../env');\n\tvar TimeoutError = require('../TimeoutError');\n\n\tfunction setTimeout(f, ms, x, y) {\n\t\treturn env.setTimer(function() {\n\t\t\tf(x, y, ms);\n\t\t}, ms);\n\t}\n\n\treturn function timed(Promise) {\n\t\t/**\n\t\t * Return a new promise whose fulfillment value is revealed only\n\t\t * after ms milliseconds\n\t\t * @param {number} ms milliseconds\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.delay = function(ms) {\n\t\t\tvar p = this._beget();\n\t\t\tthis._handler.fold(handleDelay, ms, void 0, p._handler);\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction handleDelay(ms, x, h) {\n\t\t\tsetTimeout(resolveDelay, ms, x, h);\n\t\t}\n\n\t\tfunction resolveDelay(x, h) {\n\t\t\th.resolve(x);\n\t\t}\n\n\t\t/**\n\t\t * Return a new promise that rejects after ms milliseconds unless\n\t\t * this promise fulfills earlier, in which case the returned promise\n\t\t * fulfills with the same value.\n\t\t * @param {number} ms milliseconds\n\t\t * @param {Error|*=} reason optional rejection reason to use, defaults\n\t\t *   to a TimeoutError if not provided\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.timeout = function(ms, reason) {\n\t\t\tvar p = this._beget();\n\t\t\tvar h = p._handler;\n\n\t\t\tvar t = setTimeout(onTimeout, ms, reason, p._handler);\n\n\t\t\tthis._handler.visit(h,\n\t\t\t\tfunction onFulfill(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.resolve(x); // this = h\n\t\t\t\t},\n\t\t\t\tfunction onReject(x) {\n\t\t\t\t\tenv.clearTimer(t);\n\t\t\t\t\tthis.reject(x); // this = h\n\t\t\t\t},\n\t\t\t\th.notify);\n\n\t\t\treturn p;\n\t\t};\n\n\t\tfunction onTimeout(reason, h, ms) {\n\t\t\tvar e = typeof reason === 'undefined'\n\t\t\t\t? new TimeoutError('timed out after ' + ms + 'ms')\n\t\t\t\t: reason;\n\t\t\th.reject(e);\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/state',[],function() {\n\n\treturn {\n\t\tpending: toPendingState,\n\t\tfulfilled: toFulfilledState,\n\t\trejected: toRejectedState,\n\t\tinspect: inspect\n\t};\n\n\tfunction toPendingState() {\n\t\treturn { state: 'pending' };\n\t}\n\n\tfunction toRejectedState(e) {\n\t\treturn { state: 'rejected', reason: e };\n\t}\n\n\tfunction toFulfilledState(x) {\n\t\treturn { state: 'fulfilled', value: x };\n\t}\n\n\tfunction inspect(handler) {\n\t\tvar state = handler.state();\n\t\treturn state === 0 ? toPendingState()\n\t\t\t : state > 0   ? toFulfilledState(handler.value)\n\t\t\t               : toRejectedState(handler.value);\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/apply',[],function() {\n\n\tmakeApply.tryCatchResolve = tryCatchResolve;\n\n\treturn makeApply;\n\n\tfunction makeApply(Promise, call) {\n\t\tif(arguments.length < 2) {\n\t\t\tcall = tryCatchResolve;\n\t\t}\n\n\t\treturn apply;\n\n\t\tfunction apply(f, thisArg, args) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar l = args.length;\n\t\t\tvar params = new Array(l);\n\t\t\tcallAndResolve({ f:f, thisArg:thisArg, args:args, params:params, i:l-1, call:call }, p._handler);\n\n\t\t\treturn p;\n\t\t}\n\n\t\tfunction callAndResolve(c, h) {\n\t\t\tif(c.i < 0) {\n\t\t\t\treturn call(c.f, c.thisArg, c.params, h);\n\t\t\t}\n\n\t\t\tvar handler = Promise._handler(c.args[c.i]);\n\t\t\thandler.fold(callAndResolveNext, c, void 0, h);\n\t\t}\n\n\t\tfunction callAndResolveNext(c, x, h) {\n\t\t\tc.params[c.i] = x;\n\t\t\tc.i -= 1;\n\t\t\tcallAndResolve(c, h);\n\t\t}\n\t}\n\n\tfunction tryCatchResolve(f, thisArg, args, resolver) {\n\t\ttry {\n\t\t\tresolver.resolve(f.apply(thisArg, args));\n\t\t} catch(e) {\n\t\t\tresolver.reject(e);\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/array',['require','../state','../apply'],function(require) {\n\n\tvar state = require('../state');\n\tvar applier = require('../apply');\n\n\treturn function array(Promise) {\n\n\t\tvar applyFold = applier(Promise);\n\t\tvar toPromise = Promise.resolve;\n\t\tvar all = Promise.all;\n\n\t\tvar ar = Array.prototype.reduce;\n\t\tvar arr = Array.prototype.reduceRight;\n\t\tvar slice = Array.prototype.slice;\n\n\t\t// Additional array combinators\n\n\t\tPromise.any = any;\n\t\tPromise.some = some;\n\t\tPromise.settle = settle;\n\n\t\tPromise.map = map;\n\t\tPromise.filter = filter;\n\t\tPromise.reduce = reduce;\n\t\tPromise.reduceRight = reduceRight;\n\n\t\t/**\n\t\t * When this promise fulfills with an array, do\n\t\t * onFulfilled.apply(void 0, array)\n\t\t * @param {function} onFulfilled function to apply\n\t\t * @returns {Promise} promise for the result of applying onFulfilled\n\t\t */\n\t\tPromise.prototype.spread = function(onFulfilled) {\n\t\t\treturn this.then(all).then(function(array) {\n\t\t\t\treturn onFulfilled.apply(this, array);\n\t\t\t});\n\t\t};\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * One-winner competitive race.\n\t\t * Return a promise that will fulfill when one of the promises\n\t\t * in the input array fulfills, or will reject when all promises\n\t\t * have rejected.\n\t\t * @param {array} promises\n\t\t * @returns {Promise} promise for the first fulfilled value\n\t\t */\n\t\tfunction any(promises) {\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\t\t\tvar l = promises.length>>>0;\n\n\t\t\tvar pending = l;\n\t\t\tvar errors = [];\n\n\t\t\tfor (var h, x, i = 0; i < l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = Promise._handler(x);\n\t\t\t\tif(h.state() > 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tPromise._visitRemaining(promises, i, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, handleFulfill, handleReject);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.reject(new RangeError('any(): array must not be empty'));\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction handleFulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\terrors = null;\n\t\t\t\tthis.resolve(x); // this === resolver\n\t\t\t}\n\n\t\t\tfunction handleReject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * N-winner competitive race\n\t\t * Return a promise that will fulfill when n input promises have\n\t\t * fulfilled, or will reject when it becomes impossible for n\n\t\t * input promises to fulfill (ie when promises.length - n + 1\n\t\t * have rejected)\n\t\t * @param {array} promises\n\t\t * @param {number} n\n\t\t * @returns {Promise} promise for the earliest n fulfillment values\n\t\t *\n\t\t * @deprecated\n\t\t */\n\t\tfunction some(promises, n) {\n\t\t\t/*jshint maxcomplexity:7*/\n\t\t\tvar p = Promise._defer();\n\t\t\tvar resolver = p._handler;\n\n\t\t\tvar results = [];\n\t\t\tvar errors = [];\n\n\t\t\tvar l = promises.length>>>0;\n\t\t\tvar nFulfill = 0;\n\t\t\tvar nReject;\n\t\t\tvar x, i; // reused in both for() loops\n\n\t\t\t// First pass: count actual array items\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t++nFulfill;\n\t\t\t}\n\n\t\t\t// Compute actual goals\n\t\t\tn = Math.max(n, 0);\n\t\t\tnReject = (nFulfill - n + 1);\n\t\t\tnFulfill = Math.min(n, nFulfill);\n\n\t\t\tif(n > nFulfill) {\n\t\t\t\tresolver.reject(new RangeError('some(): array must contain at least '\n\t\t\t\t+ n + ' item(s), but had ' + nFulfill));\n\t\t\t} else if(nFulfill === 0) {\n\t\t\t\tresolver.resolve(results);\n\t\t\t}\n\n\t\t\t// Second pass: observe each array item, make progress toward goals\n\t\t\tfor(i=0; i<l; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif(x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tPromise._handler(x).visit(resolver, fulfill, reject, resolver.notify);\n\t\t\t}\n\n\t\t\treturn p;\n\n\t\t\tfunction fulfill(x) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresults.push(x);\n\t\t\t\tif(--nFulfill === 0) {\n\t\t\t\t\terrors = null;\n\t\t\t\t\tthis.resolve(results);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction reject(e) {\n\t\t\t\t/*jshint validthis:true*/\n\t\t\t\tif(this.resolved) { // this === resolver\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\terrors.push(e);\n\t\t\t\tif(--nReject === 0) {\n\t\t\t\t\tresults = null;\n\t\t\t\t\tthis.reject(errors);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Apply f to the value of each promise in a list of promises\n\t\t * and return a new list containing the results.\n\t\t * @param {array} promises\n\t\t * @param {function(x:*, index:Number):*} f mapping function\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction map(promises, f) {\n\t\t\treturn Promise._traverse(f, promises);\n\t\t}\n\n\t\t/**\n\t\t * Filter the provided array of promises using the provided predicate.  Input may\n\t\t * contain promises and values\n\t\t * @param {Array} promises array of promises and values\n\t\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t\t *  Must return truthy (or promise for truthy) for items to retain.\n\t\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t\t *  for which predicate returned truthy.\n\t\t */\n\t\tfunction filter(promises, predicate) {\n\t\t\tvar a = slice.call(promises);\n\t\t\treturn Promise._traverse(predicate, a).then(function(keep) {\n\t\t\t\treturn filterSync(a, keep);\n\t\t\t});\n\t\t}\n\n\t\tfunction filterSync(promises, keep) {\n\t\t\t// Safe because we know all promises have fulfilled if we've made it this far\n\t\t\tvar l = keep.length;\n\t\t\tvar filtered = new Array(l);\n\t\t\tfor(var i=0, j=0; i<l; ++i) {\n\t\t\t\tif(keep[i]) {\n\t\t\t\t\tfiltered[j++] = Promise._handler(promises[i]).value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiltered.length = j;\n\t\t\treturn filtered;\n\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that will always fulfill with an array containing\n\t\t * the outcome states of all input promises.  The returned promise\n\t\t * will never reject.\n\t\t * @param {Array} promises\n\t\t * @returns {Promise} promise for array of settled state descriptors\n\t\t */\n\t\tfunction settle(promises) {\n\t\t\treturn all(promises.map(settleOne));\n\t\t}\n\n\t\tfunction settleOne(p) {\n\t\t\tvar h = Promise._handler(p);\n\t\t\tif(h.state() === 0) {\n\t\t\t\treturn toPromise(p).then(state.fulfilled, state.rejected);\n\t\t\t}\n\n\t\t\th._unreport();\n\t\t\treturn state.inspect(h);\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduce()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduce(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? ar.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: ar.call(promises, liftCombine(f));\n\t\t}\n\n\t\t/**\n\t\t * Traditional reduce function, similar to `Array.prototype.reduceRight()`, but\n\t\t * input may contain promises and/or values, and reduceFunc\n\t\t * may return either a value or a promise, *and* initialValue may\n\t\t * be a promise for the starting value.\n\t\t * @param {Array|Promise} promises array or promise for an array of anything,\n\t\t *      may contain a mix of promises and values.\n\t\t * @param {function(accumulated:*, x:*, index:Number):*} f reduce function\n\t\t * @returns {Promise} that will resolve to the final reduced value\n\t\t */\n\t\tfunction reduceRight(promises, f /*, initialValue */) {\n\t\t\treturn arguments.length > 2 ? arr.call(promises, liftCombine(f), arguments[2])\n\t\t\t\t\t: arr.call(promises, liftCombine(f));\n\t\t}\n\n\t\tfunction liftCombine(f) {\n\t\t\treturn function(z, x, i) {\n\t\t\t\treturn applyFold(f, void 0, [z,x,i]);\n\t\t\t};\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/flow',[],function() {\n\n\treturn function flow(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\t\tvar reject = Promise.reject;\n\t\tvar origCatch = Promise.prototype['catch'];\n\n\t\t/**\n\t\t * Handle the ultimate fulfillment value or rejection reason, and assume\n\t\t * responsibility for all errors.  If an error propagates out of result\n\t\t * or handleFatalError, it will be rethrown to the host, resulting in a\n\t\t * loud stack track on most platforms and a crash on some.\n\t\t * @param {function?} onResult\n\t\t * @param {function?} onError\n\t\t * @returns {undefined}\n\t\t */\n\t\tPromise.prototype.done = function(onResult, onError) {\n\t\t\tthis._handler.visit(this._handler.receiver, onResult, onError);\n\t\t};\n\n\t\t/**\n\t\t * Add Error-type and predicate matching to catch.  Examples:\n\t\t * promise.catch(TypeError, handleTypeError)\n\t\t *   .catch(predicate, handleMatchedErrors)\n\t\t *   .catch(handleRemainingErrors)\n\t\t * @param onRejected\n\t\t * @returns {*}\n\t\t */\n\t\tPromise.prototype['catch'] = Promise.prototype.otherwise = function(onRejected) {\n\t\t\tif (arguments.length < 2) {\n\t\t\t\treturn origCatch.call(this, onRejected);\n\t\t\t}\n\n\t\t\tif(typeof onRejected !== 'function') {\n\t\t\t\treturn this.ensure(rejectInvalidPredicate);\n\t\t\t}\n\n\t\t\treturn origCatch.call(this, createCatchFilter(arguments[1], onRejected));\n\t\t};\n\n\t\t/**\n\t\t * Wraps the provided catch handler, so that it will only be called\n\t\t * if the predicate evaluates truthy\n\t\t * @param {?function} handler\n\t\t * @param {function} predicate\n\t\t * @returns {function} conditional catch handler\n\t\t */\n\t\tfunction createCatchFilter(handler, predicate) {\n\t\t\treturn function(e) {\n\t\t\t\treturn evaluatePredicate(e, predicate)\n\t\t\t\t\t? handler.call(this, e)\n\t\t\t\t\t: reject(e);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Ensures that onFulfilledOrRejected will be called regardless of whether\n\t\t * this promise is fulfilled or rejected.  onFulfilledOrRejected WILL NOT\n\t\t * receive the promises' value or reason.  Any returned value will be disregarded.\n\t\t * onFulfilledOrRejected may throw or return a rejected promise to signal\n\t\t * an additional error.\n\t\t * @param {function} handler handler to be called regardless of\n\t\t *  fulfillment or rejection\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['finally'] = Promise.prototype.ensure = function(handler) {\n\t\t\tif(typeof handler !== 'function') {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\treturn this.then(function(x) {\n\t\t\t\treturn runSideEffect(handler, this, identity, x);\n\t\t\t}, function(e) {\n\t\t\t\treturn runSideEffect(handler, this, reject, e);\n\t\t\t});\n\t\t};\n\n\t\tfunction runSideEffect (handler, thisArg, propagate, value) {\n\t\t\tvar result = handler.call(thisArg);\n\t\t\treturn maybeThenable(result)\n\t\t\t\t? propagateValue(result, propagate, value)\n\t\t\t\t: propagate(value);\n\t\t}\n\n\t\tfunction propagateValue (result, propagate, x) {\n\t\t\treturn resolve(result).then(function () {\n\t\t\t\treturn propagate(x);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Recover from a failure by returning a defaultValue.  If defaultValue\n\t\t * is a promise, it's fulfillment value will be used.  If defaultValue is\n\t\t * a promise that rejects, the returned promise will reject with the\n\t\t * same reason.\n\t\t * @param {*} defaultValue\n\t\t * @returns {Promise} new promise\n\t\t */\n\t\tPromise.prototype['else'] = Promise.prototype.orElse = function(defaultValue) {\n\t\t\treturn this.then(void 0, function() {\n\t\t\t\treturn defaultValue;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Shortcut for .then(function() { return value; })\n\t\t * @param  {*} value\n\t\t * @return {Promise} a promise that:\n\t\t *  - is fulfilled if value is not a promise, or\n\t\t *  - if value is a promise, will fulfill with its value, or reject\n\t\t *    with its reason.\n\t\t */\n\t\tPromise.prototype['yield'] = function(value) {\n\t\t\treturn this.then(function() {\n\t\t\t\treturn value;\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Runs a side effect when this promise fulfills, without changing the\n\t\t * fulfillment value.\n\t\t * @param {function} onFulfilledSideEffect\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.tap = function(onFulfilledSideEffect) {\n\t\t\treturn this.then(onFulfilledSideEffect)['yield'](this);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n\tfunction rejectInvalidPredicate() {\n\t\tthrow new TypeError('catch predicate must be a function');\n\t}\n\n\tfunction evaluatePredicate(e, predicate) {\n\t\treturn isError(predicate) ? e instanceof predicate : predicate(e);\n\t}\n\n\tfunction isError(predicate) {\n\t\treturn predicate === Error\n\t\t\t|| (predicate != null && predicate.prototype instanceof Error);\n\t}\n\n\tfunction maybeThenable(x) {\n\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t}\n\n\tfunction identity(x) {\n\t\treturn x;\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n/** @author Jeff Escalante */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/fold',[],function() {\n\n\treturn function fold(Promise) {\n\n\t\tPromise.prototype.fold = function(f, z) {\n\t\t\tvar promise = this._beget();\n\n\t\t\tthis._handler.fold(function(z, x, to) {\n\t\t\t\tPromise._handler(z).fold(function(x, z, to) {\n\t\t\t\t\tto.resolve(f.call(this, z, x));\n\t\t\t\t}, x, this, to);\n\t\t\t}, z, promise._handler.receiver, promise._handler);\n\n\t\t\treturn promise;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/inspect',['require','../state'],function(require) {\n\n\tvar inspect = require('../state').inspect;\n\n\treturn function inspection(Promise) {\n\n\t\tPromise.prototype.inspect = function() {\n\t\t\treturn inspect(Promise._handler(this));\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/iterate',[],function() {\n\n\treturn function generate(Promise) {\n\n\t\tvar resolve = Promise.resolve;\n\n\t\tPromise.iterate = iterate;\n\t\tPromise.unfold = unfold;\n\n\t\treturn Promise;\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.iterate\n\t\t * Generate a (potentially infinite) stream of promised values:\n\t\t * x, f(x), f(f(x)), etc. until condition(x) returns true\n\t\t * @param {function} f function to generate a new x from the previous x\n\t\t * @param {function} condition function that, given the current x, returns\n\t\t *  truthy when the iterate should stop\n\t\t * @param {function} handler function to handle the value produced by f\n\t\t * @param {*|Promise} x starting value, may be a promise\n\t\t * @return {Promise} the result of the last call to f before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction iterate(f, condition, handler, x) {\n\t\t\treturn unfold(function(x) {\n\t\t\t\treturn [x, f(x)];\n\t\t\t}, condition, handler, x);\n\t\t}\n\n\t\t/**\n\t\t * @deprecated Use github.com/cujojs/most streams and most.unfold\n\t\t * Generate a (potentially infinite) stream of promised values\n\t\t * by applying handler(generator(seed)) iteratively until\n\t\t * condition(seed) returns true.\n\t\t * @param {function} unspool function that generates a [value, newSeed]\n\t\t *  given a seed.\n\t\t * @param {function} condition function that, given the current seed, returns\n\t\t *  truthy when the unfold should stop\n\t\t * @param {function} handler function to handle the value produced by unspool\n\t\t * @param x {*|Promise} starting value, may be a promise\n\t\t * @return {Promise} the result of the last value produced by unspool before\n\t\t *  condition returns true\n\t\t */\n\t\tfunction unfold(unspool, condition, handler, x) {\n\t\t\treturn resolve(x).then(function(seed) {\n\t\t\t\treturn resolve(condition(seed)).then(function(done) {\n\t\t\t\t\treturn done ? seed : resolve(unspool(seed)).spread(next);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction next(item, newSeed) {\n\t\t\t\treturn resolve(handler(item)).then(function() {\n\t\t\t\t\treturn unfold(unspool, condition, handler, newSeed);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/progress',[],function() {\n\n\treturn function progress(Promise) {\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Register a progress handler for this promise\n\t\t * @param {function} onProgress\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype.progress = function(onProgress) {\n\t\t\treturn this.then(void 0, void 0, onProgress);\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/with',[],function() {\n\n\treturn function addWith(Promise) {\n\t\t/**\n\t\t * Returns a promise whose handlers will be called with `this` set to\n\t\t * the supplied receiver.  Subsequent promises derived from the\n\t\t * returned promise will also have their handlers called with receiver\n\t\t * as `this`. Calling `with` with undefined or no arguments will return\n\t\t * a promise whose handlers will again be called in the usual Promises/A+\n\t\t * way (no `this`) thus safely undoing any previous `with` in the\n\t\t * promise chain.\n\t\t *\n\t\t * WARNING: Promises returned from `with`/`withThis` are NOT Promises/A+\n\t\t * compliant, specifically violating 2.2.5 (http://promisesaplus.com/#point-41)\n\t\t *\n\t\t * @param {object} receiver `this` value for all handlers attached to\n\t\t *  the returned promise.\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype['with'] = Promise.prototype.withThis = function(receiver) {\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\t\t\tchild.receiver = receiver;\n\t\t\tthis._handler.chain(child, receiver);\n\t\t\treturn p;\n\t\t};\n\n\t\treturn Promise;\n\t};\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/format',[],function() {\n\n\treturn {\n\t\tformatError: formatError,\n\t\tformatObject: formatObject,\n\t\ttryStringify: tryStringify\n\t};\n\n\t/**\n\t * Format an error into a string.  If e is an Error and has a stack property,\n\t * it's returned.  Otherwise, e is formatted using formatObject, with a\n\t * warning added about e not being a proper Error.\n\t * @param {*} e\n\t * @returns {String} formatted string, suitable for output to developers\n\t */\n\tfunction formatError(e) {\n\t\tvar s = typeof e === 'object' && e !== null && e.stack ? e.stack : formatObject(e);\n\t\treturn e instanceof Error ? s : s + ' (WARNING: non-Error used)';\n\t}\n\n\t/**\n\t * Format an object, detecting \"plain\" objects and running them through\n\t * JSON.stringify if possible.\n\t * @param {Object} o\n\t * @returns {string}\n\t */\n\tfunction formatObject(o) {\n\t\tvar s = String(o);\n\t\tif(s === '[object Object]' && typeof JSON !== 'undefined') {\n\t\t\ts = tryStringify(o, s);\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Try to return the result of JSON.stringify(x).  If that fails, return\n\t * defaultValue\n\t * @param {*} x\n\t * @param {*} defaultValue\n\t * @returns {String|*} JSON.stringify(x) or defaultValue\n\t */\n\tfunction tryStringify(x, defaultValue) {\n\t\ttry {\n\t\t\treturn JSON.stringify(x);\n\t\t} catch(e) {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/decorators/unhandledRejection',['require','../env','../format'],function(require) {\n\n\tvar setTimer = require('../env').setTimer;\n\tvar format = require('../format');\n\n\treturn function unhandledRejection(Promise) {\n\n\t\tvar logError = noop;\n\t\tvar logInfo = noop;\n\t\tvar localConsole;\n\n\t\tif(typeof console !== 'undefined') {\n\t\t\t// Alias console to prevent things like uglify's drop_console option from\n\t\t\t// removing console.log/error. Unhandled rejections fall into the same\n\t\t\t// category as uncaught exceptions, and build tools shouldn't silence them.\n\t\t\tlocalConsole = console;\n\t\t\tlogError = typeof localConsole.error !== 'undefined'\n\t\t\t\t? function (e) { localConsole.error(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\n\t\t\tlogInfo = typeof localConsole.info !== 'undefined'\n\t\t\t\t? function (e) { localConsole.info(e); }\n\t\t\t\t: function (e) { localConsole.log(e); };\n\t\t}\n\n\t\tPromise.onPotentiallyUnhandledRejection = function(rejection) {\n\t\t\tenqueue(report, rejection);\n\t\t};\n\n\t\tPromise.onPotentiallyUnhandledRejectionHandled = function(rejection) {\n\t\t\tenqueue(unreport, rejection);\n\t\t};\n\n\t\tPromise.onFatalRejection = function(rejection) {\n\t\t\tenqueue(throwit, rejection.value);\n\t\t};\n\n\t\tvar tasks = [];\n\t\tvar reported = [];\n\t\tvar running = null;\n\n\t\tfunction report(r) {\n\t\t\tif(!r.handled) {\n\t\t\t\treported.push(r);\n\t\t\t\tlogError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction unreport(r) {\n\t\t\tvar i = reported.indexOf(r);\n\t\t\tif(i >= 0) {\n\t\t\t\treported.splice(i, 1);\n\t\t\t\tlogInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));\n\t\t\t}\n\t\t}\n\n\t\tfunction enqueue(f, x) {\n\t\t\ttasks.push(f, x);\n\t\t\tif(running === null) {\n\t\t\t\trunning = setTimer(flush, 0);\n\t\t\t}\n\t\t}\n\n\t\tfunction flush() {\n\t\t\trunning = null;\n\t\t\twhile(tasks.length > 0) {\n\t\t\t\ttasks.shift()(tasks.shift());\n\t\t\t}\n\t\t}\n\n\t\treturn Promise;\n\t};\n\n\tfunction throwit(e) {\n\t\tthrow e;\n\t}\n\n\tfunction noop() {}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/makePromise',[],function() {\n\n\treturn function makePromise(environment) {\n\n\t\tvar tasks = environment.scheduler;\n\t\tvar emitRejection = initEmitRejection();\n\n\t\tvar objectCreate = Object.create ||\n\t\t\tfunction(proto) {\n\t\t\t\tfunction Child() {}\n\t\t\t\tChild.prototype = proto;\n\t\t\t\treturn new Child();\n\t\t\t};\n\n\t\t/**\n\t\t * Create a promise whose fate is determined by resolver\n\t\t * @constructor\n\t\t * @returns {Promise} promise\n\t\t * @name Promise\n\t\t */\n\t\tfunction Promise(resolver, handler) {\n\t\t\tthis._handler = resolver === Handler ? handler : init(resolver);\n\t\t}\n\n\t\t/**\n\t\t * Run the supplied resolver\n\t\t * @param resolver\n\t\t * @returns {Pending}\n\t\t */\n\t\tfunction init(resolver) {\n\t\t\tvar handler = new Pending();\n\n\t\t\ttry {\n\t\t\t\tresolver(promiseResolve, promiseReject, promiseNotify);\n\t\t\t} catch (e) {\n\t\t\t\tpromiseReject(e);\n\t\t\t}\n\n\t\t\treturn handler;\n\n\t\t\t/**\n\t\t\t * Transition from pre-resolution state to post-resolution state, notifying\n\t\t\t * all listeners of the ultimate fulfillment or rejection\n\t\t\t * @param {*} x resolution value\n\t\t\t */\n\t\t\tfunction promiseResolve (x) {\n\t\t\t\thandler.resolve(x);\n\t\t\t}\n\t\t\t/**\n\t\t\t * Reject this promise with reason, which will be used verbatim\n\t\t\t * @param {Error|*} reason rejection reason, strongly suggested\n\t\t\t *   to be an Error type\n\t\t\t */\n\t\t\tfunction promiseReject (reason) {\n\t\t\t\thandler.reject(reason);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @deprecated\n\t\t\t * Issue a progress event, notifying all progress listeners\n\t\t\t * @param {*} x progress event payload to pass to all listeners\n\t\t\t */\n\t\t\tfunction promiseNotify (x) {\n\t\t\t\thandler.notify(x);\n\t\t\t}\n\t\t}\n\n\t\t// Creation\n\n\t\tPromise.resolve = resolve;\n\t\tPromise.reject = reject;\n\t\tPromise.never = never;\n\n\t\tPromise._defer = defer;\n\t\tPromise._handler = getHandler;\n\n\t\t/**\n\t\t * Returns a trusted promise. If x is already a trusted promise, it is\n\t\t * returned, otherwise returns a new trusted Promise which follows x.\n\t\t * @param  {*} x\n\t\t * @return {Promise} promise\n\t\t */\n\t\tfunction resolve(x) {\n\t\t\treturn isPromise(x) ? x\n\t\t\t\t: new Promise(Handler, new Async(getHandler(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a reject promise with x as its reason (x is used verbatim)\n\t\t * @param {*} x\n\t\t * @returns {Promise} rejected promise\n\t\t */\n\t\tfunction reject(x) {\n\t\t\treturn new Promise(Handler, new Async(new Rejected(x)));\n\t\t}\n\n\t\t/**\n\t\t * Return a promise that remains pending forever\n\t\t * @returns {Promise} forever-pending promise.\n\t\t */\n\t\tfunction never() {\n\t\t\treturn foreverPendingPromise; // Should be frozen\n\t\t}\n\n\t\t/**\n\t\t * Creates an internal {promise, resolver} pair\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tfunction defer() {\n\t\t\treturn new Promise(Handler, new Pending());\n\t\t}\n\n\t\t// Transformation and flow control\n\n\t\t/**\n\t\t * Transform this promise's fulfillment value, returning a new Promise\n\t\t * for the transformed result.  If the promise cannot be fulfilled, onRejected\n\t\t * is called with the reason.  onProgress *may* be called with updates toward\n\t\t * this promise's fulfillment.\n\t\t * @param {function=} onFulfilled fulfillment handler\n\t\t * @param {function=} onRejected rejection handler\n\t\t * @param {function=} onProgress @deprecated progress handler\n\t\t * @return {Promise} new promise\n\t\t */\n\t\tPromise.prototype.then = function(onFulfilled, onRejected, onProgress) {\n\t\t\tvar parent = this._handler;\n\t\t\tvar state = parent.join().state();\n\n\t\t\tif ((typeof onFulfilled !== 'function' && state > 0) ||\n\t\t\t\t(typeof onRejected !== 'function' && state < 0)) {\n\t\t\t\t// Short circuit: value will not change, simply share handler\n\t\t\t\treturn new this.constructor(Handler, parent);\n\t\t\t}\n\n\t\t\tvar p = this._beget();\n\t\t\tvar child = p._handler;\n\n\t\t\tparent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);\n\n\t\t\treturn p;\n\t\t};\n\n\t\t/**\n\t\t * If this promise cannot be fulfilled due to an error, call onRejected to\n\t\t * handle the error. Shortcut for .then(undefined, onRejected)\n\t\t * @param {function?} onRejected\n\t\t * @return {Promise}\n\t\t */\n\t\tPromise.prototype['catch'] = function(onRejected) {\n\t\t\treturn this.then(void 0, onRejected);\n\t\t};\n\n\t\t/**\n\t\t * Creates a new, pending promise of the same type as this promise\n\t\t * @private\n\t\t * @returns {Promise}\n\t\t */\n\t\tPromise.prototype._beget = function() {\n\t\t\treturn begetFrom(this._handler, this.constructor);\n\t\t};\n\n\t\tfunction begetFrom(parent, Promise) {\n\t\t\tvar child = new Pending(parent.receiver, parent.join().context);\n\t\t\treturn new Promise(Handler, child);\n\t\t}\n\n\t\t// Array combinators\n\n\t\tPromise.all = all;\n\t\tPromise.race = race;\n\t\tPromise._traverse = traverse;\n\n\t\t/**\n\t\t * Return a promise that will fulfill when all promises in the\n\t\t * input array have fulfilled, or will reject when one of the\n\t\t * promises rejects.\n\t\t * @param {array} promises array of promises\n\t\t * @returns {Promise} promise for array of fulfillment values\n\t\t */\n\t\tfunction all(promises) {\n\t\t\treturn traverseWith(snd, null, promises);\n\t\t}\n\n\t\t/**\n\t\t * Array<Promise<X>> -> Promise<Array<f(X)>>\n\t\t * @private\n\t\t * @param {function} f function to apply to each promise's value\n\t\t * @param {Array} promises array of promises\n\t\t * @returns {Promise} promise for transformed values\n\t\t */\n\t\tfunction traverse(f, promises) {\n\t\t\treturn traverseWith(tryCatch2, f, promises);\n\t\t}\n\n\t\tfunction traverseWith(tryMap, f, promises) {\n\t\t\tvar handler = typeof f === 'function' ? mapAt : settleAt;\n\n\t\t\tvar resolver = new Pending();\n\t\t\tvar pending = promises.length >>> 0;\n\t\t\tvar results = new Array(pending);\n\n\t\t\tfor (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {\n\t\t\t\tx = promises[i];\n\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\t--pending;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttraverseAt(promises, handler, i, x, resolver);\n\t\t\t}\n\n\t\t\tif(pending === 0) {\n\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t}\n\n\t\t\treturn new Promise(Handler, resolver);\n\n\t\t\tfunction mapAt(i, x, resolver) {\n\t\t\t\tif(!resolver.resolved) {\n\t\t\t\t\ttraverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction settleAt(i, x, resolver) {\n\t\t\t\tresults[i] = x;\n\t\t\t\tif(--pending === 0) {\n\t\t\t\t\tresolver.become(new Fulfilled(results));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction traverseAt(promises, handler, i, x, resolver) {\n\t\t\tif (maybeThenable(x)) {\n\t\t\t\tvar h = getHandlerMaybeThenable(x);\n\t\t\t\tvar s = h.state();\n\n\t\t\t\tif (s === 0) {\n\t\t\t\t\th.fold(handler, i, void 0, resolver);\n\t\t\t\t} else if (s > 0) {\n\t\t\t\t\thandler(i, h.value, resolver);\n\t\t\t\t} else {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandler(i, x, resolver);\n\t\t\t}\n\t\t}\n\n\t\tPromise._visitRemaining = visitRemaining;\n\t\tfunction visitRemaining(promises, start, handler) {\n\t\t\tfor(var i=start; i<promises.length; ++i) {\n\t\t\t\tmarkAsHandled(getHandler(promises[i]), handler);\n\t\t\t}\n\t\t}\n\n\t\tfunction markAsHandled(h, handler) {\n\t\t\tif(h === handler) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar s = h.state();\n\t\t\tif(s === 0) {\n\t\t\t\th.visit(h, void 0, h._unreport);\n\t\t\t} else if(s < 0) {\n\t\t\t\th._unreport();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fulfill-reject competitive race. Return a promise that will settle\n\t\t * to the same state as the earliest input promise to settle.\n\t\t *\n\t\t * WARNING: The ES6 Promise spec requires that race()ing an empty array\n\t\t * must return a promise that is pending forever.  This implementation\n\t\t * returns a singleton forever-pending promise, the same singleton that is\n\t\t * returned by Promise.never(), thus can be checked with ===\n\t\t *\n\t\t * @param {array} promises array of promises to race\n\t\t * @returns {Promise} if input is non-empty, a promise that will settle\n\t\t * to the same outcome as the earliest input promise to settle. if empty\n\t\t * is empty, returns a promise that will never settle.\n\t\t */\n\t\tfunction race(promises) {\n\t\t\tif(typeof promises !== 'object' || promises === null) {\n\t\t\t\treturn reject(new TypeError('non-iterable passed to race()'));\n\t\t\t}\n\n\t\t\t// Sigh, race([]) is untestable unless we return *something*\n\t\t\t// that is recognizable without calling .then() on it.\n\t\t\treturn promises.length === 0 ? never()\n\t\t\t\t : promises.length === 1 ? resolve(promises[0])\n\t\t\t\t : runRace(promises);\n\t\t}\n\n\t\tfunction runRace(promises) {\n\t\t\tvar resolver = new Pending();\n\t\t\tvar i, x, h;\n\t\t\tfor(i=0; i<promises.length; ++i) {\n\t\t\t\tx = promises[i];\n\t\t\t\tif (x === void 0 && !(i in promises)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\th = getHandler(x);\n\t\t\t\tif(h.state() !== 0) {\n\t\t\t\t\tresolver.become(h);\n\t\t\t\t\tvisitRemaining(promises, i+1, h);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\th.visit(resolver, resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new Promise(Handler, resolver);\n\t\t}\n\n\t\t// Promise internals\n\t\t// Below this, everything is @private\n\n\t\t/**\n\t\t * Get an appropriate handler for x, without checking for cycles\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandler(x) {\n\t\t\tif(isPromise(x)) {\n\t\t\t\treturn x._handler.join();\n\t\t\t}\n\t\t\treturn maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for thenable x.\n\t\t * NOTE: You must only call this if maybeThenable(x) == true\n\t\t * @param {object|function|Promise} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerMaybeThenable(x) {\n\t\t\treturn isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);\n\t\t}\n\n\t\t/**\n\t\t * Get a handler for potentially untrusted thenable x\n\t\t * @param {*} x\n\t\t * @returns {object} handler\n\t\t */\n\t\tfunction getHandlerUntrusted(x) {\n\t\t\ttry {\n\t\t\t\tvar untrustedThen = x.then;\n\t\t\t\treturn typeof untrustedThen === 'function'\n\t\t\t\t\t? new Thenable(untrustedThen, x)\n\t\t\t\t\t: new Fulfilled(x);\n\t\t\t} catch(e) {\n\t\t\t\treturn new Rejected(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Handler for a promise that is pending forever\n\t\t * @constructor\n\t\t */\n\t\tfunction Handler() {}\n\n\t\tHandler.prototype.when\n\t\t\t= Handler.prototype.become\n\t\t\t= Handler.prototype.notify // deprecated\n\t\t\t= Handler.prototype.fail\n\t\t\t= Handler.prototype._unreport\n\t\t\t= Handler.prototype._report\n\t\t\t= noop;\n\n\t\tHandler.prototype._state = 0;\n\n\t\tHandler.prototype.state = function() {\n\t\t\treturn this._state;\n\t\t};\n\n\t\t/**\n\t\t * Recursively collapse handler chain to find the handler\n\t\t * nearest to the fully resolved value.\n\t\t * @returns {object} handler nearest the fully resolved value\n\t\t */\n\t\tHandler.prototype.join = function() {\n\t\t\tvar h = this;\n\t\t\twhile(h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t}\n\t\t\treturn h;\n\t\t};\n\n\t\tHandler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {\n\t\t\tthis.when({\n\t\t\t\tresolver: to,\n\t\t\t\treceiver: receiver,\n\t\t\t\tfulfilled: fulfilled,\n\t\t\t\trejected: rejected,\n\t\t\t\tprogress: progress\n\t\t\t});\n\t\t};\n\n\t\tHandler.prototype.visit = function(receiver, fulfilled, rejected, progress) {\n\t\t\tthis.chain(failIfRejected, receiver, fulfilled, rejected, progress);\n\t\t};\n\n\t\tHandler.prototype.fold = function(f, z, c, to) {\n\t\t\tthis.when(new Fold(f, z, c, to));\n\t\t};\n\n\t\t/**\n\t\t * Handler that invokes fail() on any handler it becomes\n\t\t * @constructor\n\t\t */\n\t\tfunction FailIfRejected() {}\n\n\t\tinherit(Handler, FailIfRejected);\n\n\t\tFailIfRejected.prototype.become = function(h) {\n\t\t\th.fail();\n\t\t};\n\n\t\tvar failIfRejected = new FailIfRejected();\n\n\t\t/**\n\t\t * Handler that manages a queue of consumers waiting on a pending promise\n\t\t * @constructor\n\t\t */\n\t\tfunction Pending(receiver, inheritedContext) {\n\t\t\tPromise.createContext(this, inheritedContext);\n\n\t\t\tthis.consumers = void 0;\n\t\t\tthis.receiver = receiver;\n\t\t\tthis.handler = void 0;\n\t\t\tthis.resolved = false;\n\t\t}\n\n\t\tinherit(Handler, Pending);\n\n\t\tPending.prototype._state = 0;\n\n\t\tPending.prototype.resolve = function(x) {\n\t\t\tthis.become(getHandler(x));\n\t\t};\n\n\t\tPending.prototype.reject = function(x) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.become(new Rejected(x));\n\t\t};\n\n\t\tPending.prototype.join = function() {\n\t\t\tif (!this.resolved) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar h = this;\n\n\t\t\twhile (h.handler !== void 0) {\n\t\t\t\th = h.handler;\n\t\t\t\tif (h === this) {\n\t\t\t\t\treturn this.handler = cycle();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn h;\n\t\t};\n\n\t\tPending.prototype.run = function() {\n\t\t\tvar q = this.consumers;\n\t\t\tvar handler = this.handler;\n\t\t\tthis.handler = this.handler.join();\n\t\t\tthis.consumers = void 0;\n\n\t\t\tfor (var i = 0; i < q.length; ++i) {\n\t\t\t\thandler.when(q[i]);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.become = function(handler) {\n\t\t\tif(this.resolved) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.resolved = true;\n\t\t\tthis.handler = handler;\n\t\t\tif(this.consumers !== void 0) {\n\t\t\t\ttasks.enqueue(this);\n\t\t\t}\n\n\t\t\tif(this.context !== void 0) {\n\t\t\t\thandler._report(this.context);\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.when = function(continuation) {\n\t\t\tif(this.resolved) {\n\t\t\t\ttasks.enqueue(new ContinuationTask(continuation, this.handler));\n\t\t\t} else {\n\t\t\t\tif(this.consumers === void 0) {\n\t\t\t\t\tthis.consumers = [continuation];\n\t\t\t\t} else {\n\t\t\t\t\tthis.consumers.push(continuation);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tPending.prototype.notify = function(x) {\n\t\t\tif(!this.resolved) {\n\t\t\t\ttasks.enqueue(new ProgressTask(x, this));\n\t\t\t}\n\t\t};\n\n\t\tPending.prototype.fail = function(context) {\n\t\t\tvar c = typeof context === 'undefined' ? this.context : context;\n\t\t\tthis.resolved && this.handler.join().fail(c);\n\t\t};\n\n\t\tPending.prototype._report = function(context) {\n\t\t\tthis.resolved && this.handler.join()._report(context);\n\t\t};\n\n\t\tPending.prototype._unreport = function() {\n\t\t\tthis.resolved && this.handler.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Wrap another handler and force it into a future stack\n\t\t * @param {object} handler\n\t\t * @constructor\n\t\t */\n\t\tfunction Async(handler) {\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tinherit(Handler, Async);\n\n\t\tAsync.prototype.when = function(continuation) {\n\t\t\ttasks.enqueue(new ContinuationTask(continuation, this));\n\t\t};\n\n\t\tAsync.prototype._report = function(context) {\n\t\t\tthis.join()._report(context);\n\t\t};\n\n\t\tAsync.prototype._unreport = function() {\n\t\t\tthis.join()._unreport();\n\t\t};\n\n\t\t/**\n\t\t * Handler that wraps an untrusted thenable and assimilates it in a future stack\n\t\t * @param {function} then\n\t\t * @param {{then: function}} thenable\n\t\t * @constructor\n\t\t */\n\t\tfunction Thenable(then, thenable) {\n\t\t\tPending.call(this);\n\t\t\ttasks.enqueue(new AssimilateTask(then, thenable, this));\n\t\t}\n\n\t\tinherit(Pending, Thenable);\n\n\t\t/**\n\t\t * Handler for a fulfilled promise\n\t\t * @param {*} x fulfillment value\n\t\t * @constructor\n\t\t */\n\t\tfunction Fulfilled(x) {\n\t\t\tPromise.createContext(this);\n\t\t\tthis.value = x;\n\t\t}\n\n\t\tinherit(Handler, Fulfilled);\n\n\t\tFulfilled.prototype._state = 1;\n\n\t\tFulfilled.prototype.fold = function(f, z, c, to) {\n\t\t\trunContinuation3(f, z, this, c, to);\n\t\t};\n\n\t\tFulfilled.prototype.when = function(cont) {\n\t\t\trunContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tvar errorId = 0;\n\n\t\t/**\n\t\t * Handler for a rejected promise\n\t\t * @param {*} x rejection reason\n\t\t * @constructor\n\t\t */\n\t\tfunction Rejected(x) {\n\t\t\tPromise.createContext(this);\n\n\t\t\tthis.id = ++errorId;\n\t\t\tthis.value = x;\n\t\t\tthis.handled = false;\n\t\t\tthis.reported = false;\n\n\t\t\tthis._report();\n\t\t}\n\n\t\tinherit(Handler, Rejected);\n\n\t\tRejected.prototype._state = -1;\n\n\t\tRejected.prototype.fold = function(f, z, c, to) {\n\t\t\tto.become(this);\n\t\t};\n\n\t\tRejected.prototype.when = function(cont) {\n\t\t\tif(typeof cont.rejected === 'function') {\n\t\t\t\tthis._unreport();\n\t\t\t}\n\t\t\trunContinuation1(cont.rejected, this, cont.receiver, cont.resolver);\n\t\t};\n\n\t\tRejected.prototype._report = function(context) {\n\t\t\ttasks.afterQueue(new ReportTask(this, context));\n\t\t};\n\n\t\tRejected.prototype._unreport = function() {\n\t\t\tif(this.handled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.handled = true;\n\t\t\ttasks.afterQueue(new UnreportTask(this));\n\t\t};\n\n\t\tRejected.prototype.fail = function(context) {\n\t\t\tthis.reported = true;\n\t\t\temitRejection('unhandledRejection', this);\n\t\t\tPromise.onFatalRejection(this, context === void 0 ? this.context : context);\n\t\t};\n\n\t\tfunction ReportTask(rejection, context) {\n\t\t\tthis.rejection = rejection;\n\t\t\tthis.context = context;\n\t\t}\n\n\t\tReportTask.prototype.run = function() {\n\t\t\tif(!this.rejection.handled && !this.rejection.reported) {\n\t\t\t\tthis.rejection.reported = true;\n\t\t\t\temitRejection('unhandledRejection', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejection(this.rejection, this.context);\n\t\t\t}\n\t\t};\n\n\t\tfunction UnreportTask(rejection) {\n\t\t\tthis.rejection = rejection;\n\t\t}\n\n\t\tUnreportTask.prototype.run = function() {\n\t\t\tif(this.rejection.reported) {\n\t\t\t\temitRejection('rejectionHandled', this.rejection) ||\n\t\t\t\t\tPromise.onPotentiallyUnhandledRejectionHandled(this.rejection);\n\t\t\t}\n\t\t};\n\n\t\t// Unhandled rejection hooks\n\t\t// By default, everything is a noop\n\n\t\tPromise.createContext\n\t\t\t= Promise.enterContext\n\t\t\t= Promise.exitContext\n\t\t\t= Promise.onPotentiallyUnhandledRejection\n\t\t\t= Promise.onPotentiallyUnhandledRejectionHandled\n\t\t\t= Promise.onFatalRejection\n\t\t\t= noop;\n\n\t\t// Errors and singletons\n\n\t\tvar foreverPendingHandler = new Handler();\n\t\tvar foreverPendingPromise = new Promise(Handler, foreverPendingHandler);\n\n\t\tfunction cycle() {\n\t\t\treturn new Rejected(new TypeError('Promise cycle'));\n\t\t}\n\n\t\t// Task runners\n\n\t\t/**\n\t\t * Run a single consumer\n\t\t * @constructor\n\t\t */\n\t\tfunction ContinuationTask(continuation, handler) {\n\t\t\tthis.continuation = continuation;\n\t\t\tthis.handler = handler;\n\t\t}\n\n\t\tContinuationTask.prototype.run = function() {\n\t\t\tthis.handler.join().when(this.continuation);\n\t\t};\n\n\t\t/**\n\t\t * Run a queue of progress handlers\n\t\t * @constructor\n\t\t */\n\t\tfunction ProgressTask(value, handler) {\n\t\t\tthis.handler = handler;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tProgressTask.prototype.run = function() {\n\t\t\tvar q = this.handler.consumers;\n\t\t\tif(q === void 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var c, i = 0; i < q.length; ++i) {\n\t\t\t\tc = q[i];\n\t\t\t\trunNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Assimilate a thenable, sending it's value to resolver\n\t\t * @param {function} then\n\t\t * @param {object|function} thenable\n\t\t * @param {object} resolver\n\t\t * @constructor\n\t\t */\n\t\tfunction AssimilateTask(then, thenable, resolver) {\n\t\t\tthis._then = then;\n\t\t\tthis.thenable = thenable;\n\t\t\tthis.resolver = resolver;\n\t\t}\n\n\t\tAssimilateTask.prototype.run = function() {\n\t\t\tvar h = this.resolver;\n\t\t\ttryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);\n\n\t\t\tfunction _resolve(x) { h.resolve(x); }\n\t\t\tfunction _reject(x)  { h.reject(x); }\n\t\t\tfunction _notify(x)  { h.notify(x); }\n\t\t};\n\n\t\tfunction tryAssimilate(then, thenable, resolve, reject, notify) {\n\t\t\ttry {\n\t\t\t\tthen.call(thenable, resolve, reject, notify);\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Fold a handler value with z\n\t\t * @constructor\n\t\t */\n\t\tfunction Fold(f, z, c, to) {\n\t\t\tthis.f = f; this.z = z; this.c = c; this.to = to;\n\t\t\tthis.resolver = failIfRejected;\n\t\t\tthis.receiver = this;\n\t\t}\n\n\t\tFold.prototype.fulfilled = function(x) {\n\t\t\tthis.f.call(this.c, this.z, x, this.to);\n\t\t};\n\n\t\tFold.prototype.rejected = function(x) {\n\t\t\tthis.to.reject(x);\n\t\t};\n\n\t\tFold.prototype.progress = function(x) {\n\t\t\tthis.to.notify(x);\n\t\t};\n\n\t\t// Other helpers\n\n\t\t/**\n\t\t * @param {*} x\n\t\t * @returns {boolean} true iff x is a trusted Promise\n\t\t */\n\t\tfunction isPromise(x) {\n\t\t\treturn x instanceof Promise;\n\t\t}\n\n\t\t/**\n\t\t * Test just enough to rule out primitives, in order to take faster\n\t\t * paths in some code\n\t\t * @param {*} x\n\t\t * @returns {boolean} false iff x is guaranteed *not* to be a thenable\n\t\t */\n\t\tfunction maybeThenable(x) {\n\t\t\treturn (typeof x === 'object' || typeof x === 'function') && x !== null;\n\t\t}\n\n\t\tfunction runContinuation1(f, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject(f, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction runContinuation3(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.become(h);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReject3(f, x, h.value, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t */\n\t\tfunction runNotify(f, x, h, receiver, next) {\n\t\t\tif(typeof f !== 'function') {\n\t\t\t\treturn next.notify(x);\n\t\t\t}\n\n\t\t\tPromise.enterContext(h);\n\t\t\ttryCatchReturn(f, x, receiver, next);\n\t\t\tPromise.exitContext();\n\t\t}\n\n\t\tfunction tryCatch2(f, a, b) {\n\t\t\ttry {\n\t\t\t\treturn f(a, b);\n\t\t\t} catch(e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Return f.call(thisArg, x), or if it throws return a rejected promise for\n\t\t * the thrown exception\n\t\t */\n\t\tfunction tryCatchReject(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.become(getHandler(f.call(thisArg, x)));\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Same as above, but includes the extra argument parameter.\n\t\t */\n\t\tfunction tryCatchReject3(f, x, y, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tf.call(thisArg, x, y, next);\n\t\t\t} catch(e) {\n\t\t\t\tnext.become(new Rejected(e));\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @deprecated\n\t\t * Return f.call(thisArg, x), or if it throws, *return* the exception\n\t\t */\n\t\tfunction tryCatchReturn(f, x, thisArg, next) {\n\t\t\ttry {\n\t\t\t\tnext.notify(f.call(thisArg, x));\n\t\t\t} catch(e) {\n\t\t\t\tnext.notify(e);\n\t\t\t}\n\t\t}\n\n\t\tfunction inherit(Parent, Child) {\n\t\t\tChild.prototype = objectCreate(Parent.prototype);\n\t\t\tChild.prototype.constructor = Child;\n\t\t}\n\n\t\tfunction snd(x, y) {\n\t\t\treturn y;\n\t\t}\n\n\t\tfunction noop() {}\n\n\t\tfunction initEmitRejection() {\n\t\t\t/*global process, self, CustomEvent*/\n\t\t\tif(typeof process !== 'undefined' && process !== null\n\t\t\t\t&& typeof process.emit === 'function') {\n\t\t\t\t// Returning falsy here means to call the default\n\t\t\t\t// onPotentiallyUnhandledRejection API.  This is safe even in\n\t\t\t\t// browserify since process.emit always returns falsy in browserify:\n\t\t\t\t// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46\n\t\t\t\treturn function(type, rejection) {\n\t\t\t\t\treturn type === 'unhandledRejection'\n\t\t\t\t\t\t? process.emit(type, rejection.value, rejection)\n\t\t\t\t\t\t: process.emit(type, rejection);\n\t\t\t\t};\n\t\t\t} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {\n\t\t\t\treturn (function(noop, self, CustomEvent) {\n\t\t\t\t\tvar hasCustomEvent = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar ev = new CustomEvent('unhandledRejection');\n\t\t\t\t\t\thasCustomEvent = ev instanceof CustomEvent;\n\t\t\t\t\t} catch (e) {}\n\n\t\t\t\t\treturn !hasCustomEvent ? noop : function(type, rejection) {\n\t\t\t\t\t\tvar ev = new CustomEvent(type, {\n\t\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\t\treason: rejection.value,\n\t\t\t\t\t\t\t\tkey: rejection\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: true\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn !self.dispatchEvent(ev);\n\t\t\t\t\t};\n\t\t\t\t}(noop, self, CustomEvent));\n\t\t\t}\n\n\t\t\treturn noop;\n\t\t}\n\n\t\treturn Promise;\n\t};\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/Scheduler',[],function() {\n\n\t// Credit to Twisol (https://github.com/Twisol) for suggesting\n\t// this type of extensible queue + trampoline approach for next-tick conflation.\n\n\t/**\n\t * Async task scheduler\n\t * @param {function} async function to schedule a single async function\n\t * @constructor\n\t */\n\tfunction Scheduler(async) {\n\t\tthis._async = async;\n\t\tthis._running = false;\n\n\t\tthis._queue = this;\n\t\tthis._queueLen = 0;\n\t\tthis._afterQueue = {};\n\t\tthis._afterQueueLen = 0;\n\n\t\tvar self = this;\n\t\tthis.drain = function() {\n\t\t\tself._drain();\n\t\t};\n\t}\n\n\t/**\n\t * Enqueue a task\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.enqueue = function(task) {\n\t\tthis._queue[this._queueLen++] = task;\n\t\tthis.run();\n\t};\n\n\t/**\n\t * Enqueue a task to run after the main task queue\n\t * @param {{ run:function }} task\n\t */\n\tScheduler.prototype.afterQueue = function(task) {\n\t\tthis._afterQueue[this._afterQueueLen++] = task;\n\t\tthis.run();\n\t};\n\n\tScheduler.prototype.run = function() {\n\t\tif (!this._running) {\n\t\t\tthis._running = true;\n\t\t\tthis._async(this.drain);\n\t\t}\n\t};\n\n\t/**\n\t * Drain the handler queue entirely, and then the after queue\n\t */\n\tScheduler.prototype._drain = function() {\n\t\tvar i = 0;\n\t\tfor (; i < this._queueLen; ++i) {\n\t\t\tthis._queue[i].run();\n\t\t\tthis._queue[i] = void 0;\n\t\t}\n\n\t\tthis._queueLen = 0;\n\t\tthis._running = false;\n\n\t\tfor (i = 0; i < this._afterQueueLen; ++i) {\n\t\t\tthis._afterQueue[i].run();\n\t\t\tthis._afterQueue[i] = void 0;\n\t\t}\n\n\t\tthis._afterQueueLen = 0;\n\t};\n\n\treturn Scheduler;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n/** @author Brian Cavalier */\n/** @author John Hann */\n\n(function(define) { 'use strict';\ndefine('lib/Promise',['require','./makePromise','./Scheduler','./env'],function (require) {\n\n\tvar makePromise = require('./makePromise');\n\tvar Scheduler = require('./Scheduler');\n\tvar async = require('./env').asap;\n\n\treturn makePromise({\n\t\tscheduler: new Scheduler(async)\n\t});\n\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n","/** @license MIT License (c) copyright 2010-2014 original author or authors */\n\n/**\n * Promises/A+ and when() implementation\n * when is part of the cujoJS family of libraries (http://cujojs.com/)\n * @author Brian Cavalier\n * @author John Hann\n */\n(function(define) { 'use strict';\ndefine('when',['require','./lib/decorators/timed','./lib/decorators/array','./lib/decorators/flow','./lib/decorators/fold','./lib/decorators/inspect','./lib/decorators/iterate','./lib/decorators/progress','./lib/decorators/with','./lib/decorators/unhandledRejection','./lib/TimeoutError','./lib/Promise','./lib/apply'],function (require) {\n\n\tvar timed = require('./lib/decorators/timed');\n\tvar array = require('./lib/decorators/array');\n\tvar flow = require('./lib/decorators/flow');\n\tvar fold = require('./lib/decorators/fold');\n\tvar inspect = require('./lib/decorators/inspect');\n\tvar generate = require('./lib/decorators/iterate');\n\tvar progress = require('./lib/decorators/progress');\n\tvar withThis = require('./lib/decorators/with');\n\tvar unhandledRejection = require('./lib/decorators/unhandledRejection');\n\tvar TimeoutError = require('./lib/TimeoutError');\n\n\tvar Promise = [array, flow, fold, generate, progress,\n\t\tinspect, withThis, timed, unhandledRejection]\n\t\t.reduce(function(Promise, feature) {\n\t\t\treturn feature(Promise);\n\t\t}, require('./lib/Promise'));\n\n\tvar apply = require('./lib/apply')(Promise);\n\n\t// Public API\n\n\twhen.promise     = promise;              // Create a pending promise\n\twhen.resolve     = Promise.resolve;      // Create a resolved promise\n\twhen.reject      = Promise.reject;       // Create a rejected promise\n\n\twhen.lift        = lift;                 // lift a function to return promises\n\twhen['try']      = attempt;              // call a function and return a promise\n\twhen.attempt     = attempt;              // alias for when.try\n\n\twhen.iterate     = Promise.iterate;      // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\twhen.unfold      = Promise.unfold;       // DEPRECATED (use cujojs/most streams) Generate a stream of promises\n\n\twhen.join        = join;                 // Join 2 or more promises\n\n\twhen.all         = all;                  // Resolve a list of promises\n\twhen.settle      = settle;               // Settle a list of promises\n\n\twhen.any         = lift(Promise.any);    // One-winner race\n\twhen.some        = lift(Promise.some);   // Multi-winner race\n\twhen.race        = lift(Promise.race);   // First-to-settle race\n\n\twhen.map         = map;                  // Array.map() for promises\n\twhen.filter      = filter;               // Array.filter() for promises\n\twhen.reduce      = lift(Promise.reduce);       // Array.reduce() for promises\n\twhen.reduceRight = lift(Promise.reduceRight);  // Array.reduceRight() for promises\n\n\twhen.isPromiseLike = isPromiseLike;      // Is something promise-like, aka thenable\n\n\twhen.Promise     = Promise;              // Promise constructor\n\twhen.defer       = defer;                // Create a {promise, resolve, reject} tuple\n\n\t// Error types\n\n\twhen.TimeoutError = TimeoutError;\n\n\t/**\n\t * Get a trusted promise for x, or by transforming x with onFulfilled\n\t *\n\t * @param {*} x\n\t * @param {function?} onFulfilled callback to be called when x is\n\t *   successfully fulfilled.  If promiseOrValue is an immediate value, callback\n\t *   will be invoked immediately.\n\t * @param {function?} onRejected callback to be called when x is\n\t *   rejected.\n\t * @param {function?} onProgress callback to be called when progress updates\n\t *   are issued for x. @deprecated\n\t * @returns {Promise} a new promise that will fulfill with the return\n\t *   value of callback or errback or the completion value of promiseOrValue if\n\t *   callback and/or errback is not supplied.\n\t */\n\tfunction when(x, onFulfilled, onRejected, onProgress) {\n\t\tvar p = Promise.resolve(x);\n\t\tif (arguments.length < 2) {\n\t\t\treturn p;\n\t\t}\n\n\t\treturn p.then(onFulfilled, onRejected, onProgress);\n\t}\n\n\t/**\n\t * Creates a new promise whose fate is determined by resolver.\n\t * @param {function} resolver function(resolve, reject, notify)\n\t * @returns {Promise} promise whose fate is determine by resolver\n\t */\n\tfunction promise(resolver) {\n\t\treturn new Promise(resolver);\n\t}\n\n\t/**\n\t * Lift the supplied function, creating a version of f that returns\n\t * promises, and accepts promises as arguments.\n\t * @param {function} f\n\t * @returns {Function} version of f that returns promises\n\t */\n\tfunction lift(f) {\n\t\treturn function() {\n\t\t\tfor(var i=0, l=arguments.length, a=new Array(l); i<l; ++i) {\n\t\t\t\ta[i] = arguments[i];\n\t\t\t}\n\t\t\treturn apply(f, this, a);\n\t\t};\n\t}\n\n\t/**\n\t * Call f in a future turn, with the supplied args, and return a promise\n\t * for the result.\n\t * @param {function} f\n\t * @returns {Promise}\n\t */\n\tfunction attempt(f /*, args... */) {\n\t\t/*jshint validthis:true */\n\t\tfor(var i=0, l=arguments.length-1, a=new Array(l); i<l; ++i) {\n\t\t\ta[i] = arguments[i+1];\n\t\t}\n\t\treturn apply(f, this, a);\n\t}\n\n\t/**\n\t * Creates a {promise, resolver} pair, either or both of which\n\t * may be given out safely to consumers.\n\t * @return {{promise: Promise, resolve: function, reject: function, notify: function}}\n\t */\n\tfunction defer() {\n\t\treturn new Deferred();\n\t}\n\n\tfunction Deferred() {\n\t\tvar p = Promise._defer();\n\n\t\tfunction resolve(x) { p._handler.resolve(x); }\n\t\tfunction reject(x) { p._handler.reject(x); }\n\t\tfunction notify(x) { p._handler.notify(x); }\n\n\t\tthis.promise = p;\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t\tthis.notify = notify;\n\t\tthis.resolver = { resolve: resolve, reject: reject, notify: notify };\n\t}\n\n\t/**\n\t * Determines if x is promise-like, i.e. a thenable object\n\t * NOTE: Will return true for *any thenable object*, and isn't truly\n\t * safe, since it may attempt to access the `then` property of x (i.e.\n\t *  clever/malicious getters may do weird things)\n\t * @param {*} x anything\n\t * @returns {boolean} true if x is promise-like\n\t */\n\tfunction isPromiseLike(x) {\n\t\treturn x && typeof x.then === 'function';\n\t}\n\n\t/**\n\t * Return a promise that will resolve only once all the supplied arguments\n\t * have resolved. The resolution value of the returned promise will be an array\n\t * containing the resolution values of each of the arguments.\n\t * @param {...*} arguments may be a mix of promises and values\n\t * @returns {Promise}\n\t */\n\tfunction join(/* ...promises */) {\n\t\treturn Promise.all(arguments);\n\t}\n\n\t/**\n\t * Return a promise that will fulfill once all input promises have\n\t * fulfilled, or reject when any one input promise rejects.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise}\n\t */\n\tfunction all(promises) {\n\t\treturn when(promises, Promise.all);\n\t}\n\n\t/**\n\t * Return a promise that will always fulfill with an array containing\n\t * the outcome states of all input promises.  The returned promise\n\t * will only reject if `promises` itself is a rejected promise.\n\t * @param {array|Promise} promises array (or promise for an array) of promises\n\t * @returns {Promise} promise for array of settled state descriptors\n\t */\n\tfunction settle(promises) {\n\t\treturn when(promises, Promise.settle);\n\t}\n\n\t/**\n\t * Promise-aware array map function, similar to `Array.prototype.map()`,\n\t * but input array may contain promises or values.\n\t * @param {Array|Promise} promises array of anything, may contain promises and values\n\t * @param {function(x:*, index:Number):*} mapFunc map function which may\n\t *  return a promise or value\n\t * @returns {Promise} promise that will fulfill with an array of mapped values\n\t *  or reject if any input promise rejects.\n\t */\n\tfunction map(promises, mapFunc) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.map(promises, mapFunc);\n\t\t});\n\t}\n\n\t/**\n\t * Filter the provided array of promises using the provided predicate.  Input may\n\t * contain promises and values\n\t * @param {Array|Promise} promises array of promises and values\n\t * @param {function(x:*, index:Number):boolean} predicate filtering predicate.\n\t *  Must return truthy (or promise for truthy) for items to retain.\n\t * @returns {Promise} promise that will fulfill with an array containing all items\n\t *  for which predicate returned truthy.\n\t */\n\tfunction filter(promises, predicate) {\n\t\treturn when(promises, function(promises) {\n\t\t\treturn Promise.filter(promises, predicate);\n\t\t});\n\t}\n\n\treturn when;\n});\n})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });\n\n"]}