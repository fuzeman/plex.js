{"version":3,"file":"plex.js","sources":["plex/core/utils.js","plex/core/headers.js","plex/core/interface_registry.js","plex/cloud/interfaces/registry.js","plex/cloud/interfaces/api/home/root.js","plex/cloud/interfaces/api/home/users.js","plex/cloud/interfaces/api/invites.js","plex/cloud/interfaces/api/root.js","plex/cloud/interfaces/pms/main.js","plex/cloud/interfaces/pms/playlists.js","plex/cloud/interfaces/pms/social.js","plex/cloud/interfaces/devices.js","plex/cloud/interfaces/main.js","plex/cloud/interfaces/root.js","plex/cloud/interfaces/users.js","plex/cloud/main.js","plex/main.js","plex.js"],"names":["define","utils","url","query","encode","parameters","isDefined","components","key","hasOwnProperty","push","encodeURIComponent","join","path","length","clone","obj","temp","constructor","value","UAParser","buildDefaultHeaders","parser","browser","getBrowser","os","getOS","X-Plex-Device","name","X-Plex-Device-Name","X-Plex-Platform","X-Plex-Platform-Version","version","substr","indexOf","X-Plex-Product","X-Plex-Version","Headers","this","current","prototype","get","headers","result","update","reset","setDevice","device","setPlatform","setProduct","InterfaceRegistry","interfaces","set","cls","__path__","Error","console","debug","expose","target","registry","Root","$c","$r","method","config","outputType","request","users","Users","id","pin","Invites","requested","requests","home","resources","includeHttps","Main","ip","Playlists","all","playlist","unwatched","deleteItem","Social","networks","Devices","scrobble","identifier","unscrobble","devices","account","login","username","password","Authorization","btoa","httpinvoke","when","Cloud","baseUrl","token","deferred","defer","converters","xml text","serializer","XMLSerializer","serializeToString","text xml","DOMParser","parseFromString","then","response","statusCode","resolve","body","reject","statusText","promise","cloud","plex","log"],"mappings":"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,EAAAe,OAAAJ,EAAAG,KAAAH,EAAAC,WAAAD,EAAAxE,QAAA,KAAAwE,EAAAK,aAEA,SAAAA,GAEAhB,EAAAe,OAAA,KAAA,KAAA,KAAA,KAAAC,KAGAhB,EAAAiB,SAGApB,ICtEApG,OAAA,aACA,mBACA,SAAAoG,GACA,OACAA,MAAAA,EAEAqB,MAAA,GAAArB,MAGApG,OAAA,QCRA,aACA,SAAA0H,GAGA,MAFAlE,SAAAmE,IAAA,oBAEAD;AjBJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA,AD8DA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA,AD8BA;AC7BA;AACA;AACA;AACA;ACJA,ADKA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA,ADuBA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA,ADSA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["define('plex/core/utils',[], function() {\r\n    var utils = {\r\n        url: {\r\n            query: {\r\n                encode: function(parameters) {\r\n                    // Check if the `parameters` are valid\r\n                    if(!utils.isDefined(parameters)) {\r\n                        return '';\r\n                    }\r\n\r\n                    // Build query string\r\n                    var components = [];\r\n\r\n                    for(var key in parameters) {\r\n                        if(!parameters.hasOwnProperty(key)) {\r\n                            continue;\r\n                        }\r\n\r\n                        components.push(encodeURIComponent(key) + '=' + encodeURIComponent(parameters[key]));\r\n                    }\r\n\r\n                    return components.join('&');\r\n                }\r\n            },\r\n\r\n            encode: function(path, parameters) {\r\n                var query = utils.url.query.encode(parameters);\r\n\r\n                if(query.length === 0) {\r\n                    // No parameters provided\r\n                    return path;\r\n                }\r\n\r\n                return path + '?' + query;\r\n            }\r\n        },\r\n\r\n        clone: function(obj) {\r\n            if (obj === null || typeof obj !== 'object') {\r\n                return obj;\r\n            }\r\n\r\n            var temp = obj.constructor();\r\n\r\n            for (var key in obj) {\r\n                if(!obj.hasOwnProperty(key)) {\r\n                    continue;\r\n                }\r\n\r\n                temp[key] = utils.clone(obj[key]);\r\n            }\r\n\r\n            return temp;\r\n        },\r\n\r\n        isDefined: function(value) {\r\n            return !!(typeof value !== 'undefined' && value !== null);\r\n        }\r\n    };\r\n\r\n    return utils;\r\n});\n","define('plex/core/headers',[\r\n    'plex/core/utils',\r\n    'ua-parser'\r\n], function(utils, UAParser) {\r\n    function buildDefaultHeaders() {\r\n        var parser = new UAParser(),\r\n            browser = parser.getBrowser(),\r\n            os = parser.getOS();\r\n\r\n        return {\r\n            'X-Plex-Device': os.name,\r\n            'X-Plex-Device-Name': null,\r\n\r\n            'X-Plex-Platform': browser.name,\r\n            'X-Plex-Platform-Version': browser.version.substr(0, browser.version.indexOf('.', 3)),\r\n\r\n            'X-Plex-Product': 'plex.js',\r\n            'X-Plex-Version': '1.0.0'\r\n        };\r\n    }\r\n\r\n    function Headers() {\r\n        this.default = buildDefaultHeaders();\r\n        this.current = utils.clone(this.default);\r\n    }\r\n\r\n    Headers.prototype.get = function(headers) {\r\n        headers = typeof headers !== 'undefined' ? headers : {};\r\n\r\n        // Merge headers\r\n        var result = utils.clone(this.current);\r\n\r\n        if(result['X-Plex-Device-Name'] === null) {\r\n            // Automatically generate device name\r\n            if(result['X-Plex-Product'] !== null && result['X-Plex-Platform'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'] + ' (' + result['X-Plex-Platform'] + ')';\r\n            } else if(result['X-Plex-Product'] !== null) {\r\n                result['X-Plex-Device-Name'] = result['X-Plex-Product'];\r\n            } else {\r\n                result['X-Plex-Device-Name'] = 'plex.js';\r\n            }\r\n        }\r\n\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            result[key] = headers[key];\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Headers.prototype.update = function(headers) {\r\n        for(var key in headers) {\r\n            if(!headers.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            this.current[key] = headers[key];\r\n        }\r\n    };\r\n\r\n    Headers.prototype.reset = function() {\r\n        this.current = utils.clone(this.default);\r\n    };\r\n\r\n    Headers.prototype.setDevice = function(name, device) {\r\n        this.update({\r\n            'X-Plex-Device': device,\r\n            'X-Plex-Device-Name': name\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setPlatform = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Platform': name,\r\n            'X-Plex-Platform-Version': version\r\n        });\r\n    };\r\n\r\n    Headers.prototype.setProduct = function(name, version) {\r\n        this.update({\r\n            'X-Plex-Product': name,\r\n            'X-Plex-Version': version\r\n        });\r\n    };\r\n\r\n    return Headers;\r\n});\n","define('plex/core/interface_registry',[], function() {\r\n    function InterfaceRegistry() {\r\n        this.interfaces = {};\r\n    }\r\n\r\n    InterfaceRegistry.prototype.set = function(cls) {\r\n        var path = cls.__path__;\r\n\r\n        if(typeof path === 'undefined' || path === null) {\r\n            throw new Error('Interface is missing a \"__path__\" attribute', cls);\r\n        }\r\n\r\n        // Register interface\r\n        this.interfaces[path] = cls;\r\n\r\n        console.debug('Registered interface \"%s\"', path);\r\n    };\r\n\r\n    InterfaceRegistry.prototype.expose = function(target) {\r\n        for(var key in this.interfaces) {\r\n            if(!this.interfaces.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            target[key] = new this.interfaces[key](target);\r\n        }\r\n    };\r\n\r\n    return InterfaceRegistry;\r\n});\n","define('plex/cloud/interfaces/registry',[\r\n    'plex/core/interface_registry'\r\n], function(InterfaceRegistry) {\r\n    return new InterfaceRegistry();\r\n});\n","define('plex/cloud/interfaces/api/home/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api/home';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/api/home/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.switch = function(id, pin) {\r\n        if(!utils.isDefined(id)) {\r\n            throw new Error();\r\n        }\r\n\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(pin)) {\r\n            parameters['pin'] = pin;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('POST', utils.url.encode(id + '/switch', parameters));\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/api/home/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/interfaces/api/invites',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Invites($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Invites.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Invites.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Invites.prototype.requested = function() {\r\n        return this.$r('GET', 'requested');\r\n    };\r\n\r\n    Invites.prototype.requests = function() {\r\n        return this.$r('GET', 'requests');\r\n    };\r\n\r\n    // Register interface\r\n    Invites.__path__ = '/api/invites';\r\n\r\n    registry.set(Invites);\r\n});\n","define('plex/cloud/interfaces/api/root',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.home = function() {\r\n        return this.$r('GET', 'home');\r\n    };\r\n\r\n    Root.prototype.resources = function(includeHttps) {\r\n        // Build query\r\n        var parameters = {};\r\n\r\n        if(utils.isDefined(includeHttps)) {\r\n            // Convert boolean to integer\r\n            if(typeof includeHttps === 'boolean') {\r\n                includeHttps = includeHttps ? 1 : 0;\r\n            }\r\n\r\n            parameters['includeHttps'] = includeHttps;\r\n        }\r\n\r\n        // Send request\r\n        return this.$r('GET', utils.url.encode('resources', parameters));\r\n    };\r\n\r\n    Root.prototype.users = function() {\r\n        return this.$r('GET', 'users');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '/api';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/pms/main',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.ip = function() {\r\n        return this.$r('GET', 'ip');\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/pms/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/pms/playlists',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Playlists($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Playlists.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Playlists.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Playlists.prototype.all = function(playlist) {\r\n        return this.$r('GET', playlist + '/all');\r\n    };\r\n\r\n    Playlists.prototype.unwatched = function(playlist) {\r\n        return this.$r('GET', playlist + '/unwatched');\r\n    };\r\n\r\n    // Items\r\n    Playlists.prototype.deleteItem = function(playlist, id) {\r\n        return this.$r('DELETE', playlist + '/items/' + id);\r\n    };\r\n\r\n    // Register interface\r\n    Playlists.__path__ = '/pms/playlists';\r\n\r\n    registry.set(Playlists);\r\n});\n","define('plex/cloud/interfaces/pms/social',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Social($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Social.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Social.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Social.prototype.networks = function() {\r\n        return this.$r('GET', 'networks');\r\n    };\r\n\r\n    // Register interface\r\n    Social.__path__ = '/pms/social';\r\n\r\n    registry.set(Social);\r\n});\n","define('plex/cloud/interfaces/devices',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Devices($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Devices.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Devices.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Devices.prototype.delete = function(id) {\r\n        return this.$r('DELETE', id + '.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Devices.__path__ = '/devices';\r\n\r\n    registry.set(Devices);\r\n});\n","define('plex/cloud/interfaces/main',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Main($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Main.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Main.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Main.prototype.scrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('scrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    Main.prototype.unscrobble = function(key, identifier) {\r\n        if(!utils.isDefined(key) || !utils.isDefined(identifier)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('GET', utils.url.encode('unscrobble', {\r\n            key: key,\r\n            identifier: identifier\r\n        }));\r\n    };\r\n\r\n    // Register interface\r\n    Main.__path__ = '/:';\r\n\r\n    registry.set(Main);\r\n});\n","define('plex/cloud/interfaces/root',[\r\n    'plex/cloud/interfaces/registry'\r\n], function(registry) {\r\n    function Root($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Root.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Root.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Root.prototype.devices = function() {\r\n        return this.$r('GET', 'devices.xml');\r\n    };\r\n\r\n    // Register interface\r\n    Root.__path__ = '';\r\n\r\n    registry.set(Root);\r\n});\n","define('plex/cloud/interfaces/users',[\r\n    'plex/cloud/interfaces/registry',\r\n    'plex/core/utils'\r\n], function(registry, utils) {\r\n    function Users($c) {\r\n        this.$c = $c;\r\n    }\r\n\r\n    Users.prototype.$r = function(method, path, config) {\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.outputType = 'xml';\r\n\r\n        return this.$c.request(method, Users.__path__ + '/' + path, config);\r\n    };\r\n\r\n    Users.prototype.account = function() {\r\n        return this.$r('GET', 'account');\r\n    };\r\n\r\n    Users.prototype.login = function(username, password) {\r\n        if(!utils.isDefined(username) || !utils.isDefined(password)) {\r\n            throw new Error();\r\n        }\r\n\r\n        return this.$r('POST', 'sign_in.xml', {\r\n            headers: {\r\n                'Authorization': 'Basic ' + btoa(username + ':' + password)\r\n            }\r\n        });\r\n    };\r\n\r\n    // Register interface\r\n    Users.__path__ = '/users';\r\n\r\n    registry.set(Users);\r\n});\n","define('plex/cloud/main',[\r\n    'plex/core/headers',\r\n    'plex/cloud/interfaces/registry',\r\n    'httpinvoke',\r\n    'when',\r\n\r\n    // cloud interfaces\r\n    'plex/cloud/interfaces/api/home/root',\r\n    'plex/cloud/interfaces/api/home/users',\r\n    'plex/cloud/interfaces/api/invites',\r\n    'plex/cloud/interfaces/api/root',\r\n\r\n    'plex/cloud/interfaces/pms/main',\r\n    'plex/cloud/interfaces/pms/playlists',\r\n    'plex/cloud/interfaces/pms/social',\r\n\r\n    'plex/cloud/interfaces/devices',\r\n    'plex/cloud/interfaces/main',\r\n    'plex/cloud/interfaces/root',\r\n    'plex/cloud/interfaces/users'\r\n], function(Headers, registry, httpinvoke, when) {\r\n    function Cloud() {\r\n        this.baseUrl = 'https://plex.tv';\r\n        this.headers = new Headers();\r\n        this.token = null;\r\n\r\n        // Expose interfaces\r\n        registry.expose(this);\r\n    }\r\n\r\n    Cloud.prototype.request = function(method, path, config) {\r\n        var url = this.baseUrl + '/' + path,\r\n            deferred = when.defer();\r\n\r\n        // Build request\r\n        config = typeof config !== 'undefined' ? config : {};\r\n        config.converters = {\r\n            'xml text': function(value) {\r\n                var serializer = new XMLSerializer();\r\n\r\n                return serializer.serializeToString(value);\r\n            },\r\n            'text xml': function(value) {\r\n                var parser = new DOMParser();\r\n\r\n                return parser.parseFromString(value, 'text/xml');\r\n            }\r\n        };\r\n        config.headers = this.headers.get(config.headers);\r\n\r\n        if(this.token !== null) {\r\n            config.headers['X-Plex-Token'] = this.token;\r\n        }\r\n\r\n        // Send request\r\n        httpinvoke(url, method, config).then(function(response) {\r\n            // Handle response\r\n            if(response.statusCode >= 200 && response.statusCode <= 299) {\r\n                deferred.resolve(response.body);\r\n            } else {\r\n                deferred.reject(response.body, response.statusCode, response.headers, null, response.statusText);\r\n            }\r\n        }, function(statusText) {\r\n            // Socket error\r\n            deferred.reject(null, null, null, null, statusText);\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return Cloud;\r\n});\n","define('plex/main',[\r\n    'plex/cloud/main'\r\n], function(Cloud) {\r\n    return {\r\n        Cloud: Cloud,\r\n\r\n        cloud: new Cloud()\r\n    };\r\n});\n","define('plex',[\r\n    'plex/main'\r\n], function(plex) {\r\n    console.log('plex initialized');\r\n\r\n    return plex;\r\n});\n"]}